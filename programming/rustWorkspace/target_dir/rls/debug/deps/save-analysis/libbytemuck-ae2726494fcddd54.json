{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1","program":"/home/andort/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=ae2726494fcddd54","-C","extra-filename=-ae2726494fcddd54","--out-dir","/home/andort/programming/rustWorkspace/mnist_frontend/programming/rustWorkspace/target_dir/rls/debug/deps","-L","dependency=/home/andort/programming/rustWorkspace/mnist_frontend/programming/rustWorkspace/target_dir/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/andort/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/andort/programming/rustWorkspace/mnist_frontend/programming/rustWorkspace/target_dir/rls/debug/deps/libbytemuck-ae2726494fcddd54.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[6472324776173685644,15100177940621381241]},"crate_root":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src","external_crates":[{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[13741360846946026623,2672266499591153283]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4729845745352067521,14981637654352572000]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[9324331421111590993,11905740212167270908]}}],"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":0,"byte_end":13946,"line_start":1,"line_end":447,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1894,"byte_end":1898,"line_start":51,"line_end":51,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1619,"byte_end":1620,"line_start":45,"line_end":45,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":0,"byte_end":13946,"line_start":1,"line_end":447,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":561},{"krate":0,"index":582},{"krate":0,"index":580},{"krate":0,"index":579},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":570},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":230}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":35,"byte_end":109,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":110,"byte_end":113,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":114,"byte_end":127,"line_start":6,"line_end":6,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":128,"byte_end":131,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":132,"byte_end":205,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":206,"byte_end":220,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":221,"byte_end":224,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":225,"byte_end":248,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":249,"byte_end":277,"line_start":12,"line_end":12,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":278,"byte_end":310,"line_start":13,"line_end":13,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":311,"byte_end":343,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":344,"byte_end":384,"line_start":15,"line_end":15,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":385,"byte_end":388,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":389,"byte_end":464,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":465,"byte_end":544,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":545,"byte_end":625,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":626,"byte_end":705,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":706,"byte_end":724,"line_start":21,"line_end":21,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":725,"byte_end":728,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":729,"byte_end":756,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":757,"byte_end":760,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":761,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":833,"byte_end":873,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":874,"byte_end":877,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":878,"byte_end":953,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":954,"byte_end":1031,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1032,"byte_end":1109,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1110,"byte_end":1155,"line_start":31,"line_end":31,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1156,"byte_end":1159,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1160,"byte_end":1175,"line_start":33,"line_end":33,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1176,"byte_end":1179,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1180,"byte_end":1260,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1261,"byte_end":1340,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1341,"byte_end":1420,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":1421,"byte_end":1491,"line_start":38,"line_end":38,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":14},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14868,"byte_end":14876,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":15}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14410,"byte_end":14461,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14462,"byte_end":14496,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14497,"byte_end":14500,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14501,"byte_end":14564,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14565,"byte_end":14621,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14622,"byte_end":14625,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14626,"byte_end":14639,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14640,"byte_end":14643,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14644,"byte_end":14685,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14686,"byte_end":14733,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14734,"byte_end":14807,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14808,"byte_end":14850,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15156,"byte_end":15162,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"pub fn zeroed() -> Self","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14888,"byte_end":14928,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14931,"byte_end":14934,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14937,"byte_end":15012,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15015,"byte_end":15093,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15096,"byte_end":15138,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15141,"byte_end":15150,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":110},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20153,"byte_end":20156,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":18857,"byte_end":18895,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":18896,"byte_end":18899,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":18900,"byte_end":18977,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":18978,"byte_end":19057,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19058,"byte_end":19138,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19139,"byte_end":19157,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19158,"byte_end":19161,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19162,"byte_end":19238,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19239,"byte_end":19310,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19311,"byte_end":19385,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19386,"byte_end":19404,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19405,"byte_end":19408,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19409,"byte_end":19422,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19423,"byte_end":19426,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19427,"byte_end":19467,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19468,"byte_end":19515,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19516,"byte_end":19594,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19595,"byte_end":19623,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any padding bytes, either in the middle or on","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19624,"byte_end":19701,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19702,"byte_end":19782,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19783,"byte_end":19863,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19864,"byte_end":19879,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19880,"byte_end":19934,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":19935,"byte_end":20010,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20011,"byte_end":20090,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20091,"byte_end":20135,"line_start":28,"line_end":28,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":162},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25571,"byte_end":25581,"line_start":79,"line_end":79,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":22603,"byte_end":22631,"line_start":4,"line_end":4,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":22632,"byte_end":22635,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":22636,"byte_end":22711,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":22712,"byte_end":22778,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":22779,"byte_end":22823,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":22824,"byte_end":22827,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":22828,"byte_end":22907,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":22908,"byte_end":22988,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":22989,"byte_end":23051,"line_start":12,"line_end":12,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23052,"byte_end":23055,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23056,"byte_end":23134,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23135,"byte_end":23210,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23211,"byte_end":23239,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23240,"byte_end":23243,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23244,"byte_end":23257,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23258,"byte_end":23261,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23262,"byte_end":23269,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23270,"byte_end":23301,"line_start":21,"line_end":21,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23302,"byte_end":23317,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23318,"byte_end":23362,"line_start":23,"line_end":23,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23363,"byte_end":23377,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23378,"byte_end":23390,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23391,"byte_end":23403,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23404,"byte_end":23416,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23417,"byte_end":23429,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23430,"byte_end":23442,"line_start":29,"line_end":29,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23443,"byte_end":23448,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23449,"byte_end":23485,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23486,"byte_end":23506,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23507,"byte_end":23548,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23549,"byte_end":23590,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23591,"byte_end":23596,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23597,"byte_end":23651,"line_start":36,"line_end":36,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23652,"byte_end":23695,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23696,"byte_end":23737,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23738,"byte_end":23745,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23746,"byte_end":23758,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23759,"byte_end":23762,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23763,"byte_end":23836,"line_start":42,"line_end":42,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23837,"byte_end":23850,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23851,"byte_end":23854,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23855,"byte_end":23932,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":23933,"byte_end":24012,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24013,"byte_end":24067,"line_start":47,"line_end":47,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24068,"byte_end":24071,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24072,"byte_end":24152,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24153,"byte_end":24175,"line_start":50,"line_end":50,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24176,"byte_end":24179,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24180,"byte_end":24260,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24261,"byte_end":24317,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24318,"byte_end":24321,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24322,"byte_end":24397,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24398,"byte_end":24470,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24471,"byte_end":24540,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24541,"byte_end":24544,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24545,"byte_end":24623,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24624,"byte_end":24700,"line_start":60,"line_end":60,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24701,"byte_end":24712,"line_start":61,"line_end":61,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24713,"byte_end":24716,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24717,"byte_end":24789,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24790,"byte_end":24868,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24869,"byte_end":24945,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":24946,"byte_end":25025,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25026,"byte_end":25029,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25030,"byte_end":25102,"line_start":68,"line_end":68,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25103,"byte_end":25168,"line_start":69,"line_end":69,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25169,"byte_end":25172,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25173,"byte_end":25250,"line_start":71,"line_end":71,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25251,"byte_end":25273,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25274,"byte_end":25277,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25278,"byte_end":25357,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25358,"byte_end":25391,"line_start":75,"line_end":75,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25392,"byte_end":25395,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25396,"byte_end":25473,"line_start":77,"line_end":77,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25474,"byte_end":25553,"line_start":78,"line_end":78,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":163},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26406,"byte_end":26409,"line_start":97,"line_end":97,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25602,"byte_end":25673,"line_start":80,"line_end":80,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25676,"byte_end":25685,"line_start":81,"line_end":81,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25688,"byte_end":25691,"line_start":82,"line_end":82,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25694,"byte_end":25766,"line_start":83,"line_end":83,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25769,"byte_end":25835,"line_start":84,"line_end":84,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25838,"byte_end":25906,"line_start":85,"line_end":85,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25909,"byte_end":25951,"line_start":86,"line_end":86,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25954,"byte_end":25957,"line_start":87,"line_end":87,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25960,"byte_end":26033,"line_start":88,"line_end":88,"column_start":3,"column_end":76}},{"value":"/   use `type Int = u8`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26036,"byte_end":26062,"line_start":89,"line_end":89,"column_start":3,"column_end":29}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26065,"byte_end":26068,"line_start":90,"line_end":90,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26071,"byte_end":26140,"line_start":91,"line_end":91,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26143,"byte_end":26219,"line_start":92,"line_end":92,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26222,"byte_end":26291,"line_start":93,"line_end":93,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26294,"byte_end":26332,"line_start":94,"line_end":94,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26335,"byte_end":26338,"line_start":95,"line_end":95,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26341,"byte_end":26398,"line_start":96,"line_end":96,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":164},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26500,"byte_end":26509,"line_start":100,"line_end":100,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26426,"byte_end":26491,"line_start":99,"line_end":99,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":165},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26599,"byte_end":26608,"line_start":103,"line_end":103,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26525,"byte_end":26590,"line_start":102,"line_end":102,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":27273,"byte_end":27285,"line_start":120,"line_end":120,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"pub fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26624,"byte_end":26692,"line_start":105,"line_end":105,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26695,"byte_end":26758,"line_start":106,"line_end":106,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26761,"byte_end":26764,"line_start":107,"line_end":107,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26767,"byte_end":26841,"line_start":108,"line_end":108,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26844,"byte_end":26911,"line_start":109,"line_end":109,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26914,"byte_end":26982,"line_start":110,"line_end":110,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26985,"byte_end":26988,"line_start":111,"line_end":111,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":26991,"byte_end":27003,"line_start":112,"line_end":112,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":27006,"byte_end":27009,"line_start":113,"line_end":113,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":27012,"byte_end":27085,"line_start":114,"line_end":114,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":27088,"byte_end":27134,"line_start":115,"line_end":115,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":27137,"byte_end":27140,"line_start":116,"line_end":116,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":27143,"byte_end":27217,"line_start":117,"line_end":117,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":27220,"byte_end":27255,"line_start":118,"line_end":118,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":27258,"byte_end":27267,"line_start":119,"line_end":119,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28836,"byte_end":28848,"line_start":155,"line_end":155,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"pub fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":162},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28152,"byte_end":28227,"line_start":139,"line_end":139,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28230,"byte_end":28306,"line_start":140,"line_end":140,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28309,"byte_end":28321,"line_start":141,"line_end":141,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28324,"byte_end":28327,"line_start":142,"line_end":142,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28330,"byte_end":28404,"line_start":143,"line_end":143,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28407,"byte_end":28474,"line_start":144,"line_end":144,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28477,"byte_end":28545,"line_start":145,"line_end":145,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28548,"byte_end":28551,"line_start":146,"line_end":146,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28554,"byte_end":28566,"line_start":147,"line_end":147,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28569,"byte_end":28572,"line_start":148,"line_end":148,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28575,"byte_end":28648,"line_start":149,"line_end":149,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28651,"byte_end":28697,"line_start":150,"line_end":150,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28700,"byte_end":28703,"line_start":151,"line_end":151,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28706,"byte_end":28780,"line_start":152,"line_end":152,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28783,"byte_end":28818,"line_start":153,"line_end":153,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":28821,"byte_end":28830,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":175},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36977,"byte_end":36995,"line_start":83,"line_end":83,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Wrapped: ?Sized>","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178}],"decl_id":null,"docs":" A trait which indicates that a type is a `repr(transparent)` wrapper around\n the `Wrapped` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `repr(transparent)` wrapper around","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34169,"byte_end":34248,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the `Wrapped` value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34249,"byte_end":34273,"line_start":4,"line_end":4,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34274,"byte_end":34277,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely creating references to `T` from those to the `Wrapped`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34278,"byte_end":34355,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ type, using the `wrap_ref` and `wrap_mut` functions.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34356,"byte_end":34412,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34413,"byte_end":34416,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34417,"byte_end":34429,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34430,"byte_end":34433,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34434,"byte_end":34503,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34504,"byte_end":34507,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Wrapped>`:","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34508,"byte_end":34581,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34582,"byte_end":34585,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ 1. Wrapper must be a `#[repr(transparent)]` wrapper around `Wrapped`. This","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34586,"byte_end":34664,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/    either means that it must be a `#[repr(transparent)]` struct which","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34665,"byte_end":34738,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/    contains a either a field of type `Wrapped` (or a field of some other","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34739,"byte_end":34815,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/    transparent wrapper for `Wrapped`) as the only non-ZST field.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34816,"byte_end":34884,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34885,"byte_end":34888,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Wrapped` field must be trivially","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34889,"byte_end":34957,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/    constructable ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":34958,"byte_end":35033,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35034,"byte_end":35037,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35038,"byte_end":35112,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/    `Wrapped`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35113,"byte_end":35130,"line_start":24,"line_end":24,"column_start":1,"column_end":18}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35131,"byte_end":35209,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35210,"byte_end":35288,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35289,"byte_end":35292,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 4. The `wrap_ref` and `wrap_mut` functions on `TransparentWrapper` may not","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35293,"byte_end":35371,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/    be overridden.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35372,"byte_end":35393,"line_start":29,"line_end":29,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35394,"byte_end":35397,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35398,"byte_end":35412,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35413,"byte_end":35416,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the wrapped type which","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35417,"byte_end":35494,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ are required for safety, it's responsible for ensuring those still hold --","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35495,"byte_end":35573,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ this generally requires preventing access to instances of the wrapped type,","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35574,"byte_end":35653,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ as implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35654,"byte_end":35726,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35727,"byte_end":35764,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35765,"byte_end":35768,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35769,"byte_end":35847,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35848,"byte_end":35916,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35917,"byte_end":35920,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35921,"byte_end":35935,"line_start":42,"line_end":42,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35936,"byte_end":35939,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35940,"byte_end":35952,"line_start":44,"line_end":44,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35953,"byte_end":35956,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35957,"byte_end":35964,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":35965,"byte_end":36002,"line_start":47,"line_end":47,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36003,"byte_end":36027,"line_start":48,"line_end":48,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36028,"byte_end":36057,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36058,"byte_end":36061,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36062,"byte_end":36086,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36087,"byte_end":36120,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36121,"byte_end":36124,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36125,"byte_end":36188,"line_start":54,"line_end":54,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36189,"byte_end":36192,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36193,"byte_end":36252,"line_start":56,"line_end":56,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36253,"byte_end":36291,"line_start":57,"line_end":57,"column_start":1,"column_end":39}},{"value":"/ let wrapped_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36292,"byte_end":36354,"line_start":58,"line_end":58,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36355,"byte_end":36358,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36359,"byte_end":36386,"line_start":60,"line_end":60,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36387,"byte_end":36433,"line_start":61,"line_end":61,"column_start":1,"column_end":47}},{"value":"/ let wrapped_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36434,"byte_end":36508,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36509,"byte_end":36512,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # let _ = (wrapped_ref, wrapped_mut); // silence warnings","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36513,"byte_end":36574,"line_start":64,"line_end":64,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36575,"byte_end":36582,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36583,"byte_end":36586,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36587,"byte_end":36626,"line_start":67,"line_end":67,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36627,"byte_end":36630,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36631,"byte_end":36638,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36639,"byte_end":36676,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36677,"byte_end":36680,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36681,"byte_end":36705,"line_start":72,"line_end":72,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36706,"byte_end":36731,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36732,"byte_end":36735,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36736,"byte_end":36794,"line_start":75,"line_end":75,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36795,"byte_end":36798,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36799,"byte_end":36842,"line_start":77,"line_end":77,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36843,"byte_end":36876,"line_start":78,"line_end":78,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36877,"byte_end":36880,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36881,"byte_end":36911,"line_start":80,"line_end":80,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36912,"byte_end":36951,"line_start":81,"line_end":81,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":36952,"byte_end":36959,"line_start":82,"line_end":82,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":37370,"byte_end":37378,"line_start":91,"line_end":91,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"pub fn wrap_ref(&Wrapped) -> &Self","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Convert a reference to a wrapped type into a reference to the wrapper.","sig":null,"attributes":[{"value":"/ Convert a reference to a wrapped type into a reference to the wrapper.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":37017,"byte_end":37091,"line_start":84,"line_end":84,"column_start":3,"column_end":77}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":37094,"byte_end":37097,"line_start":85,"line_end":85,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::wrap_ref(...)` in","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":37100,"byte_end":37175,"line_start":86,"line_end":86,"column_start":3,"column_end":78}},{"value":"/ your code. It is part of the safety contract for this trait that if you","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":37178,"byte_end":37253,"line_start":87,"line_end":87,"column_start":3,"column_end":78}},{"value":"/ implement `TransparentWrapper<_>` for your type you **must not** override","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":37256,"byte_end":37333,"line_start":88,"line_end":88,"column_start":3,"column_end":80}},{"value":"/ this method.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":37336,"byte_end":37352,"line_start":89,"line_end":89,"column_start":3,"column_end":19}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":37355,"byte_end":37364,"line_start":90,"line_end":90,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":38527,"byte_end":38535,"line_start":116,"line_end":116,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"pub fn wrap_mut(&mut Wrapped) -> &mut Self","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Convert a mut reference to a wrapped type into a mut reference to the\n wrapper.","sig":null,"attributes":[{"value":"/ Convert a mut reference to a wrapped type into a mut reference to the","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":38166,"byte_end":38239,"line_start":109,"line_end":109,"column_start":3,"column_end":76}},{"value":"/ wrapper.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":38242,"byte_end":38254,"line_start":110,"line_end":110,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":38257,"byte_end":38260,"line_start":111,"line_end":111,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::wrap_mut(...)` in","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":38263,"byte_end":38338,"line_start":112,"line_end":112,"column_start":3,"column_end":78}},{"value":"/ your code. It is part of the safety contract for this trait that if you implement","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":38341,"byte_end":38426,"line_start":113,"line_end":113,"column_start":3,"column_end":88}},{"value":"/ `TransparentWrapper<_>` for your type you **must not** override this method.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":38429,"byte_end":38509,"line_start":114,"line_end":114,"column_start":3,"column_end":83}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":38512,"byte_end":38521,"line_start":115,"line_end":115,"column_start":3,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":183},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":3523,"byte_end":3531,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"pub fn bytes_of<T: Pod>(&T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":3314,"byte_end":3348,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":3349,"byte_end":3352,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":3353,"byte_end":3431,"line_start":108,"line_end":108,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":3432,"byte_end":3505,"line_start":109,"line_end":109,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":3506,"byte_end":3515,"line_start":110,"line_end":110,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":185},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":3888,"byte_end":3900,"line_start":123,"line_end":123,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"pub fn bytes_of_mut<T: Pod>(&mut T) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":3671,"byte_end":3713,"line_start":118,"line_end":118,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":3714,"byte_end":3717,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":3718,"byte_end":3796,"line_start":120,"line_end":120,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":3797,"byte_end":3870,"line_start":121,"line_end":121,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":3871,"byte_end":3880,"line_start":122,"line_end":122,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":187},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4182,"byte_end":4192,"line_start":136,"line_end":136,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"pub fn from_bytes<T: Pod>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4052,"byte_end":4086,"line_start":130,"line_end":130,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4087,"byte_end":4090,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4091,"byte_end":4104,"line_start":132,"line_end":132,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4105,"byte_end":4108,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4109,"byte_end":4164,"line_start":134,"line_end":134,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4165,"byte_end":4174,"line_start":135,"line_end":135,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":189},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4465,"byte_end":4479,"line_start":149,"line_end":149,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"pub fn from_bytes_mut<T: Pod>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4323,"byte_end":4365,"line_start":143,"line_end":143,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4366,"byte_end":4369,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4370,"byte_end":4383,"line_start":145,"line_end":145,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4384,"byte_end":4387,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4388,"byte_end":4447,"line_start":147,"line_end":147,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4448,"byte_end":4457,"line_start":148,"line_end":148,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":191},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4820,"byte_end":4834,"line_start":163,"line_end":163,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"pub fn try_from_bytes<T: Pod>(&[u8]) -> Result<&T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4626,"byte_end":4660,"line_start":156,"line_end":156,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4661,"byte_end":4664,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4665,"byte_end":4679,"line_start":158,"line_end":158,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4680,"byte_end":4683,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4684,"byte_end":4733,"line_start":160,"line_end":160,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4734,"byte_end":4802,"line_start":161,"line_end":161,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":4803,"byte_end":4812,"line_start":162,"line_end":162,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":193},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5341,"byte_end":5359,"line_start":180,"line_end":180,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: Pod>(&mut [u8]) -> Result<&mut T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5139,"byte_end":5181,"line_start":173,"line_end":173,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5182,"byte_end":5185,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5186,"byte_end":5200,"line_start":175,"line_end":175,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5201,"byte_end":5204,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5205,"byte_end":5254,"line_start":177,"line_end":177,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5255,"byte_end":5323,"line_start":178,"line_end":178,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5324,"byte_end":5333,"line_start":179,"line_end":179,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":562},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5957,"byte_end":5997,"line_start":197,"line_end":197,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5834,"byte_end":5906,"line_start":195,"line_end":195,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5909,"byte_end":5954,"line_start":196,"line_end":196,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":564},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6183,"byte_end":6207,"line_start":201,"line_end":201,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6001,"byte_end":6069,"line_start":198,"line_end":198,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6072,"byte_end":6147,"line_start":199,"line_end":199,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6150,"byte_end":6180,"line_start":200,"line_end":200,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":566},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6428,"byte_end":6440,"line_start":205,"line_end":205,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6211,"byte_end":6286,"line_start":202,"line_end":202,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6289,"byte_end":6362,"line_start":203,"line_end":203,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6365,"byte_end":6425,"line_start":204,"line_end":204,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":568},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6731,"byte_end":6748,"line_start":212,"line_end":212,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6444,"byte_end":6518,"line_start":206,"line_end":206,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6521,"byte_end":6552,"line_start":207,"line_end":207,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6555,"byte_end":6558,"line_start":208,"line_end":208,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6561,"byte_end":6637,"line_start":209,"line_end":209,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6640,"byte_end":6715,"line_start":210,"line_end":210,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6718,"byte_end":6728,"line_start":211,"line_end":211,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":561},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5817,"byte_end":5829,"line_start":194,"line_end":194,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"pub enum PodCastError {\n\n    /// You tried to cast a slice to an element type with a higher alignment\n    /// requirement but the slice wasn't aligned.\n    TargetAlignmentGreaterAndInputNotAligned,\n\n    /// If the element size changes then the output slice changes length\n    /// accordingly. If the output slice wouldn't be a whole number of elements\n    /// then the conversion fails.\n    OutputSliceWouldHaveSlop,\n\n    /// When casting a slice you can't convert between ZST elements and non-ZST\n    /// elements. When casting an individual `T`, `&T`, or `&mut T` value the\n    /// source size and destination size must be an exact match.\n    SizeMismatch,\n\n    /// For this type of cast the alignments must be exactly the same and they\n    /// were not so now you're sad.\n    ///\n    /// This error is generated **only** by operations that cast allocated types\n    /// (such as `Box` and `Vec`), because in that case the alignment must stay\n    /// exact.\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":5683,"byte_end":5756,"line_start":192,"line_end":192,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":197},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7090,"byte_end":7094,"line_start":228,"line_end":228,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"pub fn cast<A: Pod, B: Pod>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6979,"byte_end":7000,"line_start":222,"line_end":222,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7001,"byte_end":7004,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7005,"byte_end":7018,"line_start":224,"line_end":224,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7019,"byte_end":7022,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast`] but will panic on error.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7023,"byte_end":7072,"line_start":226,"line_end":226,"column_start":1,"column_end":50}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7073,"byte_end":7082,"line_start":227,"line_end":227,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":200},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7562,"byte_end":7570,"line_start":249,"line_end":249,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"pub fn cast_mut<A: Pod, B: Pod>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7436,"byte_end":7468,"line_start":243,"line_end":243,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7469,"byte_end":7472,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7473,"byte_end":7486,"line_start":245,"line_end":245,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7487,"byte_end":7490,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7491,"byte_end":7544,"line_start":247,"line_end":247,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7545,"byte_end":7554,"line_start":248,"line_end":248,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":203},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8090,"byte_end":8098,"line_start":270,"line_end":270,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"pub fn cast_ref<A: Pod, B: Pod>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7972,"byte_end":7996,"line_start":264,"line_end":264,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":7997,"byte_end":8000,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8001,"byte_end":8014,"line_start":266,"line_end":266,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8015,"byte_end":8018,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8019,"byte_end":8072,"line_start":268,"line_end":268,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8073,"byte_end":8082,"line_start":269,"line_end":269,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":206},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8616,"byte_end":8626,"line_start":291,"line_end":291,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"pub fn cast_slice<A: Pod, B: Pod>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[T]` into `&[U]`.","sig":null,"attributes":[{"value":"/ Cast `&[T]` into `&[U]`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8492,"byte_end":8520,"line_start":285,"line_end":285,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8521,"byte_end":8524,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8525,"byte_end":8538,"line_start":287,"line_end":287,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8539,"byte_end":8542,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8543,"byte_end":8598,"line_start":289,"line_end":289,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8599,"byte_end":8608,"line_start":290,"line_end":290,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8902,"byte_end":8916,"line_start":304,"line_end":304,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"pub fn cast_slice_mut<A: Pod, B: Pod>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8766,"byte_end":8802,"line_start":298,"line_end":298,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8803,"byte_end":8806,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8807,"byte_end":8820,"line_start":300,"line_end":300,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8821,"byte_end":8824,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8825,"byte_end":8884,"line_start":302,"line_end":302,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":8885,"byte_end":8894,"line_start":303,"line_end":303,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":212},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9147,"byte_end":9159,"line_start":313,"line_end":313,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"pub fn pod_align_to<T: Pod, U: Pod>(&[T]) -> (&[T], &[U], &[T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9072,"byte_end":9129,"line_start":311,"line_end":311,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9130,"byte_end":9139,"line_start":312,"line_end":312,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":215},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9328,"byte_end":9344,"line_start":319,"line_end":319,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"pub fn pod_align_to_mut<T: Pod, U: Pod>(&mut [T])\n-> (&mut [T], &mut [U], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9249,"byte_end":9310,"line_start":317,"line_end":317,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9311,"byte_end":9320,"line_start":318,"line_end":318,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":218},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9585,"byte_end":9593,"line_start":331,"line_end":331,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"pub fn try_cast<A: Pod, B: Pod>(A) -> Result<B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9459,"byte_end":9488,"line_start":325,"line_end":325,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9489,"byte_end":9492,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9493,"byte_end":9507,"line_start":327,"line_end":327,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9508,"byte_end":9511,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9512,"byte_end":9567,"line_start":329,"line_end":329,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":9568,"byte_end":9577,"line_start":330,"line_end":330,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":221},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10243,"byte_end":10255,"line_start":352,"line_end":352,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"pub fn try_cast_ref<A: Pod, B: Pod>(&A) -> Result<&B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10050,"byte_end":10086,"line_start":345,"line_end":345,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10087,"byte_end":10090,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10091,"byte_end":10105,"line_start":347,"line_end":347,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10106,"byte_end":10109,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10110,"byte_end":10162,"line_start":349,"line_end":349,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10163,"byte_end":10225,"line_start":350,"line_end":350,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10226,"byte_end":10235,"line_start":351,"line_end":351,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":224},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10833,"byte_end":10845,"line_start":370,"line_end":370,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"pub fn try_cast_mut<A: Pod, B: Pod>(&mut A) -> Result<&mut B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10731,"byte_end":10775,"line_start":366,"line_end":366,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10776,"byte_end":10779,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10780,"byte_end":10815,"line_start":368,"line_end":368,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":10816,"byte_end":10825,"line_start":369,"line_end":369,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":227},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":12091,"byte_end":12105,"line_start":401,"line_end":401,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"pub fn try_cast_slice<A: Pod, B: Pod>(&[A]) -> Result<&[B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[T]` into `&[U]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[T]` into `&[U]` (possibly with a change in length).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11327,"byte_end":11400,"line_start":384,"line_end":384,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11401,"byte_end":11404,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11405,"byte_end":11464,"line_start":386,"line_end":386,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11465,"byte_end":11534,"line_start":387,"line_end":387,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11535,"byte_end":11538,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11539,"byte_end":11553,"line_start":389,"line_end":389,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11554,"byte_end":11557,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11558,"byte_end":11638,"line_start":391,"line_end":391,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11639,"byte_end":11659,"line_start":392,"line_end":392,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11660,"byte_end":11737,"line_start":393,"line_end":393,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11738,"byte_end":11814,"line_start":394,"line_end":394,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11815,"byte_end":11895,"line_start":395,"line_end":395,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11896,"byte_end":11920,"line_start":396,"line_end":396,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11921,"byte_end":11965,"line_start":397,"line_end":397,"column_start":1,"column_end":45}},{"value":"/   [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":11966,"byte_end":12052,"line_start":398,"line_end":398,"column_start":1,"column_end":87}},{"value":"/   and a non-ZST.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":12053,"byte_end":12073,"line_start":399,"line_end":399,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":12074,"byte_end":12083,"line_start":400,"line_end":400,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":230},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":13064,"byte_end":13082,"line_start":424,"line_end":424,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: Pod, B: Pod>(&mut [A])\n-> Result<&mut [B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [T]` into `&mut [U]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [T]` into `&mut [U]` (possibly with a change in length).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":12922,"byte_end":13003,"line_start":420,"line_end":420,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":13004,"byte_end":13007,"line_start":421,"line_end":421,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":13008,"byte_end":13046,"line_start":422,"line_end":422,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":13047,"byte_end":13056,"line_start":423,"line_end":423,"column_start":1,"column_end":10}}]}],"impls":[{"id":16,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15803,"byte_end":15811,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15844,"byte_end":15850,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15890,"byte_end":15896,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15937,"byte_end":15943,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15984,"byte_end":15990,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16031,"byte_end":16037,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16079,"byte_end":16085,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16128,"byte_end":16134,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16174,"byte_end":16180,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16221,"byte_end":16227,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16268,"byte_end":16274,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16315,"byte_end":16321,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16363,"byte_end":16369,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16494,"byte_end":16500,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16554,"byte_end":16565,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16610,"byte_end":16622,"line_start":62,"line_end":62,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":18315,"byte_end":18322,"line_start":132,"line_end":132,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":18390,"byte_end":18396,"line_start":134,"line_end":134,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":18464,"byte_end":18471,"line_start":136,"line_end":136,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":18539,"byte_end":18546,"line_start":138,"line_end":138,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":18614,"byte_end":18620,"line_start":140,"line_end":140,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":18688,"byte_end":18695,"line_start":142,"line_end":142,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20624,"byte_end":20632,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20660,"byte_end":20666,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20701,"byte_end":20707,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20743,"byte_end":20749,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20785,"byte_end":20791,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20827,"byte_end":20833,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20870,"byte_end":20876,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20914,"byte_end":20920,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20955,"byte_end":20961,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20997,"byte_end":21003,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":21039,"byte_end":21045,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":21081,"byte_end":21087,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":21124,"byte_end":21130,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":21267,"byte_end":21273,"line_start":63,"line_end":63,"column_start":33,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":21317,"byte_end":21328,"line_start":64,"line_end":64,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":21363,"byte_end":21375,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":22087,"byte_end":22094,"line_start":89,"line_end":89,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":22157,"byte_end":22163,"line_start":91,"line_end":91,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":22226,"byte_end":22233,"line_start":93,"line_end":93,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":22296,"byte_end":22303,"line_start":95,"line_end":95,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":22366,"byte_end":22372,"line_start":97,"line_end":97,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":22435,"byte_end":22442,"line_start":99,"line_end":99,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":39379,"byte_end":39387,"line_start":135,"line_end":135,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6780,"byte_end":6792,"line_start":214,"line_end":214,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":14878,"byte_end":14883,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":1976},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15803,"byte_end":15811,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":12176},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15844,"byte_end":15850,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15890,"byte_end":15896,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15937,"byte_end":15943,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":15984,"byte_end":15990,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16031,"byte_end":16037,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16079,"byte_end":16085,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16128,"byte_end":16134,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16174,"byte_end":16180,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16221,"byte_end":16227,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16268,"byte_end":16274,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16315,"byte_end":16321,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16363,"byte_end":16369,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16494,"byte_end":16500,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16554,"byte_end":16565,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":1989},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":16610,"byte_end":16622,"line_start":62,"line_end":62,"column_start":39,"column_end":51},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":16170},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":18315,"byte_end":18322,"line_start":132,"line_end":132,"column_start":34,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":35204},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":18390,"byte_end":18396,"line_start":134,"line_end":134,"column_start":34,"column_end":40},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":35213},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":18464,"byte_end":18471,"line_start":136,"line_end":136,"column_start":34,"column_end":41},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":35224},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":18539,"byte_end":18546,"line_start":138,"line_end":138,"column_start":34,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":35233},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":18614,"byte_end":18620,"line_start":140,"line_end":140,"column_start":34,"column_end":40},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":35244},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/zeroable.rs","byte_start":18688,"byte_end":18695,"line_start":142,"line_end":142,"column_start":34,"column_end":41},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":35259},"to":{"krate":0,"index":14}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20158,"byte_end":20166,"line_start":29,"line_end":29,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":14},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20169,"byte_end":20173,"line_start":29,"line_end":29,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":1981},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20624,"byte_end":20632,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":1,"index":12176},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20660,"byte_end":20666,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"kind":{"Impl":{"id":53}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20701,"byte_end":20707,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20743,"byte_end":20749,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20785,"byte_end":20791,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20827,"byte_end":20833,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"kind":{"Impl":{"id":57}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20870,"byte_end":20876,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"kind":{"Impl":{"id":58}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20914,"byte_end":20920,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20955,"byte_end":20961,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":20997,"byte_end":21003,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":21039,"byte_end":21045,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":21081,"byte_end":21087,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":21124,"byte_end":21130,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":21267,"byte_end":21273,"line_start":63,"line_end":63,"column_start":33,"column_end":39},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":30245},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":21317,"byte_end":21328,"line_start":64,"line_end":64,"column_start":29,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":1989},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":21363,"byte_end":21375,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":16170},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":22087,"byte_end":22094,"line_start":89,"line_end":89,"column_start":29,"column_end":36},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":35204},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":22157,"byte_end":22163,"line_start":91,"line_end":91,"column_start":29,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":35213},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":22226,"byte_end":22233,"line_start":93,"line_end":93,"column_start":29,"column_end":36},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":35224},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":22296,"byte_end":22303,"line_start":95,"line_end":95,"column_start":29,"column_end":36},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":35233},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":22366,"byte_end":22372,"line_start":97,"line_end":97,"column_start":29,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":35244},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/pod.rs","byte_start":22435,"byte_end":22442,"line_start":99,"line_end":99,"column_start":29,"column_end":36},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":35259},"to":{"krate":0,"index":110}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/contiguous.rs","byte_start":25583,"byte_end":25587,"line_start":79,"line_end":79,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1981},"to":{"krate":0,"index":162}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/transparent.rs","byte_start":39379,"byte_end":39387,"line_start":135,"line_end":135,"column_start":53,"column_end":61},"kind":{"Impl":{"id":93}},"from":{"krate":1,"index":12176},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.3.1/src/lib.rs","byte_start":6780,"byte_end":6792,"line_start":214,"line_end":214,"column_start":29,"column_end":41},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":561},"to":{"krate":1,"index":6320}}]}