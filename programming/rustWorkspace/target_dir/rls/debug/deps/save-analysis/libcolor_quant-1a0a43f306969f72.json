{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1","program":"/home/andort/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","color_quant","/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=1a0a43f306969f72","-C","extra-filename=-1a0a43f306969f72","--out-dir","/home/andort/programming/rustWorkspace/mnist_frontend/programming/rustWorkspace/target_dir/rls/debug/deps","-L","dependency=/home/andort/programming/rustWorkspace/mnist_frontend/programming/rustWorkspace/target_dir/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/andort/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/andort/programming/rustWorkspace/mnist_frontend/programming/rustWorkspace/target_dir/rls/debug/deps/libcolor_quant-1a0a43f306969f72.rmeta"},"prelude":{"crate_id":{"name":"color_quant","disambiguator":[12234090479303203473,1472068149228859049]},"crate_root":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src","external_crates":[{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7603043973503281951,6245179856538753269]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[13741360846946026623,2672266499591153283]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4729845745352067521,14981637654352572000]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9324331421111590993,11905740212167270908]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11392341838745785002,13287300438441731562]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8694337109875809164,2250367951223185901]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10935849247287619708,10935329660555626336]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5583458701817410803,1770096645244614441]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4926505318506753650,8786990194761766393]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15262570485262297613,5690312430589388023]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16900335184017598038,9051488994794742296]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[528960645316233979,8037674519295179684]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4483237274112351560,17959943558012528736]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[384772052184402859,1578385820564656749]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[12301751291607961788,16569514459755551136]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[4223616801544016660,17489963460572122123]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[3882963855561891520,1067502799155491607]}}],"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2445,"byte_end":16149,"line_start":52,"line_end":440,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2445,"byte_end":16149,"line_start":52,"line_end":440,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":42},{"krate":0,"index":50},{"krate":0,"index":48},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":26}],"decl_id":null,"docs":" # Color quantization library\n This library provides a color quantizer based on the [NEUQUANT](http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)\n quantization algorithm by Anthony Dekker.\n ### Usage\n ```\n let data = vec![0; 40];\n let nq = color_quant::NeuQuant::new(10, 256, &data);\n let indixes: Vec<u8> = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect();\n let color_map = nq.color_map_rgba();\n ```\n \n","sig":null,"attributes":[{"value":"/ # Color quantization library","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2445,"byte_end":2477,"line_start":52,"line_end":52,"column_start":1,"column_end":33}},{"value":"/ This library provides a color quantizer based on the [NEUQUANT](http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2478,"byte_end":2598,"line_start":53,"line_end":53,"column_start":1,"column_end":121}},{"value":"/ quantization algorithm by Anthony Dekker.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2599,"byte_end":2644,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ ### Usage","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2645,"byte_end":2658,"line_start":55,"line_end":55,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2659,"byte_end":2666,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ let data = vec![0; 40];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2667,"byte_end":2694,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/ let nq = color_quant::NeuQuant::new(10, 256, &data);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2695,"byte_end":2751,"line_start":58,"line_end":58,"column_start":1,"column_end":57}},{"value":"/ let indixes: Vec<u8> = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2752,"byte_end":2838,"line_start":59,"line_end":59,"column_start":1,"column_end":87}},{"value":"/ let color_map = nq.color_map_rgba();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2839,"byte_end":2879,"line_start":60,"line_end":60,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2880,"byte_end":2887,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":2888,"byte_end":2892,"line_start":62,"line_end":62,"column_start":1,"column_end":5}}]},{"kind":"Struct","id":{"krate":0,"index":18},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":3729,"byte_end":3737,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25}],"decl_id":null,"docs":" Neural network based color quantizer.\n","sig":null,"attributes":[{"value":"/ Neural network based color quantizer.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":3676,"byte_end":3717,"line_start":102,"line_end":102,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":4410,"byte_end":4413,"line_start":121,"line_end":121,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"pub fn new(i32, usize, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new neuronal network and trains it with the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new neuronal network and trains it with the supplied data.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":3958,"byte_end":4030,"line_start":114,"line_end":114,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":4035,"byte_end":4038,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Pixels are assumed to be in RGBA format. ","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":4043,"byte_end":4088,"line_start":116,"line_end":116,"column_start":5,"column_end":50}},{"value":"/ `colors` should be $>=64$. `samplefac` determines the faction of","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":4093,"byte_end":4161,"line_start":117,"line_end":117,"column_start":5,"column_end":73}},{"value":"/ the sample that will be used to train the network. Its value must be in the ","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":4166,"byte_end":4246,"line_start":118,"line_end":118,"column_start":5,"column_end":85}},{"value":"/ range $[1, 30]$. A value of $1$ thus produces the best result but is also","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":4251,"byte_end":4328,"line_start":119,"line_end":119,"column_start":5,"column_end":82}},{"value":"/ slowest. $10$ is a good compromise between speed and quality.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":4333,"byte_end":4398,"line_start":120,"line_end":120,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":5031,"byte_end":5035,"line_start":139,"line_end":139,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"pub fn init(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Initializes the neuronal network and trains it with the supplied data.","sig":null,"attributes":[{"value":"/ Initializes the neuronal network and trains it with the supplied data.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":4889,"byte_end":4963,"line_start":136,"line_end":136,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":4968,"byte_end":4971,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ This method gets called by `Self::new`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":4976,"byte_end":5019,"line_start":138,"line_end":138,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":5873,"byte_end":5882,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"pub fn map_pixel(&Self, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Maps the rgba-pixel in-place to the best-matching color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps the rgba-pixel in-place to the best-matching color in the color map.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":5762,"byte_end":5839,"line_start":159,"line_end":159,"column_start":5,"column_end":82}},{"value":"inline(always)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":5844,"byte_end":5861,"line_start":160,"line_end":160,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":6473,"byte_end":6481,"line_start":178,"line_end":178,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"pub fn index_of(&Self, &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the best-matching index in the color map.","sig":null,"attributes":[{"value":"/ Finds the best-matching index in the color map.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":6331,"byte_end":6382,"line_start":174,"line_end":174,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":6387,"byte_end":6390,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ `pixel` is assumed to be in RGBA format.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":6395,"byte_end":6439,"line_start":176,"line_end":176,"column_start":5,"column_end":49}},{"value":"inline(always)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":6444,"byte_end":6461,"line_start":177,"line_end":177,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":6789,"byte_end":6803,"line_start":188,"line_end":188,"column_start":12,"column_end":26},"name":"color_map_rgba","qualname":"<NeuQuant>::color_map_rgba","value":"pub fn color_map_rgba(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the RGBA color map calculated from the sample. \n","sig":null,"attributes":[{"value":"/ Returns the RGBA color map calculated from the sample. ","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":6718,"byte_end":6777,"line_start":187,"line_end":187,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":7178,"byte_end":7191,"line_start":200,"line_end":200,"column_start":12,"column_end":25},"name":"color_map_rgb","qualname":"<NeuQuant>::color_map_rgb","value":"pub fn color_map_rgb(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the RGBA color map calculated from the sample. \n","sig":null,"attributes":[{"value":"/ Returns the RGBA color map calculated from the sample. ","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":7107,"byte_end":7166,"line_start":199,"line_end":199,"column_start":5,"column_end":64}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":3943,"byte_end":3951,"line_start":113,"line_end":113,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/color_quant-1.0.1/src/lib.rs","byte_start":3943,"byte_end":3951,"line_start":113,"line_end":113,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}}]}