{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0","program":"/home/andort/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","half","--edition=2018","/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=59abf39774e72883","-C","extra-filename=-59abf39774e72883","--out-dir","/home/andort/programming/rustWorkspace/mnist_frontend/programming/rustWorkspace/target_dir/rls/debug/deps","-L","dependency=/home/andort/programming/rustWorkspace/mnist_frontend/programming/rustWorkspace/target_dir/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/andort/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/andort/programming/rustWorkspace/mnist_frontend/programming/rustWorkspace/target_dir/rls/debug/deps/libhalf-59abf39774e72883.rmeta"},"prelude":{"crate_id":{"name":"half","disambiguator":[705670998104665140,14325015986685960249]},"crate_root":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src","external_crates":[{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[13741360846946026623,2672266499591153283]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4729845745352067521,14981637654352572000]}},{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[9324331421111590993,11905740212167270908]}}],"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":0,"byte_end":4382,"line_start":1,"line_end":113,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3711,"byte_end":3714,"line_start":80,"line_end":80,"column_start":19,"column_end":22},"alias_span":null,"name":"f16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":142},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3756,"byte_end":3762,"line_start":83,"line_end":83,"column_start":19,"column_end":25},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":342},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3781,"byte_end":3785,"line_start":85,"line_end":85,"column_start":17,"column_end":21},"alias_span":null,"name":"bf16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":342},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":4011,"byte_end":4015,"line_start":97,"line_end":97,"column_start":9,"column_end":13},"alias_span":null,"name":"bf16","value":"","parent":{"krate":0,"index":328}},{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":4017,"byte_end":4020,"line_start":97,"line_end":97,"column_start":15,"column_end":18},"alias_span":null,"name":"f16","value":"","parent":{"krate":0,"index":328}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":4038,"byte_end":4054,"line_start":98,"line_end":98,"column_start":17,"column_end":33},"alias_span":null,"name":"HalfBitsSliceExt","value":"","parent":{"krate":0,"index":328}},{"kind":"Use","ref_id":{"krate":0,"index":277},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":4056,"byte_end":4073,"line_start":98,"line_end":98,"column_start":35,"column_end":52},"alias_span":null,"name":"HalfFloatSliceExt","value":"","parent":{"krate":0,"index":328}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":0,"byte_end":4382,"line_start":1,"line_end":113,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":114},{"krate":0,"index":271},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":335}],"decl_id":null,"docs":" A crate that provides support for half-precision 16-bit floating point types.","sig":null,"attributes":[{"value":"/ A crate that provides support for half-precision 16-bit floating point types.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":0,"byte_end":81,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":82,"byte_end":85,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides the [`f16`] type, which is an implementation of the IEEE 754-2008 standard","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":86,"byte_end":184,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ [`binary16`] a.k.a `half` floating point type. This 16-bit floating point type is intended for","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":185,"byte_end":283,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ efficient storage where the full range and precision of a larger floating point value is not","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":284,"byte_end":380,"line_start":5,"line_end":5,"column_start":1,"column_end":97}},{"value":"/ required. This is especially useful for image storage formats.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":381,"byte_end":447,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":448,"byte_end":451,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This crate also provides a [`bf16`] type, an alternative 16-bit floating point format. The","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":452,"byte_end":546,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/ [`bfloat16`] format is a truncated IEEE 754 standard `binary32` float that preserves the","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":547,"byte_end":639,"line_start":9,"line_end":9,"column_start":1,"column_end":93}},{"value":"/ exponent to allow the same range as `f32` but with only 8 bits of precision (instead of 11","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":640,"byte_end":734,"line_start":10,"line_end":10,"column_start":1,"column_end":95}},{"value":"/ bits for [`f16`]). See the [`bf16`] type for details.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":735,"byte_end":792,"line_start":11,"line_end":11,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":793,"byte_end":796,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Because [`f16`] and [`bf16`] are primarily for efficient storage, floating point operations such as","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":797,"byte_end":900,"line_start":13,"line_end":13,"column_start":1,"column_end":104}},{"value":"/ addition, multiplication, etc. are not implemented. Operations should be performed with `f32`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":901,"byte_end":998,"line_start":14,"line_end":14,"column_start":1,"column_end":98}},{"value":"/ or higher-precision types and converted to/from [`f16`] or [`bf16`] as necessary.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":999,"byte_end":1084,"line_start":15,"line_end":15,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1085,"byte_end":1088,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This crate also provides a [`slice`] module for zero-copy in-place conversions of `u16` slices","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1089,"byte_end":1187,"line_start":17,"line_end":17,"column_start":1,"column_end":99}},{"value":"/ to both [`f16`] and [`bf16`], as well as efficient vectorized conversions of larger buffers of","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1188,"byte_end":1286,"line_start":18,"line_end":18,"column_start":1,"column_end":99}},{"value":"/ floating point values to and from these half formats.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1287,"byte_end":1344,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1345,"byte_end":1348,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ A [`prelude`] module is provided for easy importing of available utility traits.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1349,"byte_end":1433,"line_start":21,"line_end":21,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1434,"byte_end":1437,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Some hardware architectures provide support for 16-bit floating point conversions. Enable the","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1438,"byte_end":1535,"line_start":23,"line_end":23,"column_start":1,"column_end":98}},{"value":"/ `use-intrinsics` feature to use LLVM intrinsics for hardware conversions. This crate does no","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1536,"byte_end":1632,"line_start":24,"line_end":24,"column_start":1,"column_end":97}},{"value":"/ checks on whether the hardware supports the feature. This feature currently only works on","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1633,"byte_end":1726,"line_start":25,"line_end":25,"column_start":1,"column_end":94}},{"value":"/ nightly Rust due to a compiler feature gate. When this feature is enabled and the hardware","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1727,"byte_end":1821,"line_start":26,"line_end":26,"column_start":1,"column_end":95}},{"value":"/ supports it, the [`slice`] trait conversions will use vectorized SIMD intructions for","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1822,"byte_end":1911,"line_start":27,"line_end":27,"column_start":1,"column_end":90}},{"value":"/ increased efficiency.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1912,"byte_end":1937,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1938,"byte_end":1941,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Support for [`serde`] crate `Serialize` and `Deserialize` traits is provided when the `serde`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":1942,"byte_end":2039,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ feature is enabled. This adds a dependency on [`serde`] crate so is an optional cargo feature.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2040,"byte_end":2138,"line_start":31,"line_end":31,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2139,"byte_end":2142,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The crate uses `#[no_std]` by default, so can be used in embedded environments without using the","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2143,"byte_end":2243,"line_start":33,"line_end":33,"column_start":1,"column_end":101}},{"value":"/ Rust `std` library. A `std` feature is available, which enables additional utilities using the","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2244,"byte_end":2342,"line_start":34,"line_end":34,"column_start":1,"column_end":99}},{"value":"/ `std` library, such as the [`vec`] module that provides zero-copy `Vec` conversions. The `alloc`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2343,"byte_end":2443,"line_start":35,"line_end":35,"column_start":1,"column_end":101}},{"value":"/ feature may be used to enable the [`vec`] module without adding a dependency to the `std`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2444,"byte_end":2537,"line_start":36,"line_end":36,"column_start":1,"column_end":94}},{"value":"/ library.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2538,"byte_end":2550,"line_start":37,"line_end":37,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2551,"byte_end":2554,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [`f16`]: struct.f16.html","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2555,"byte_end":2583,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/ [`binary16`]: https://en.wikipedia.org/wiki/Half-precision_floating-point_format","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2584,"byte_end":2668,"line_start":40,"line_end":40,"column_start":1,"column_end":85}},{"value":"/ [`bf16`]: struct.bf16.html","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2669,"byte_end":2699,"line_start":41,"line_end":41,"column_start":1,"column_end":31}},{"value":"/ [`bfloat16`]: https://en.wikipedia.org/wiki/Bfloat16_floating-point_format","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2700,"byte_end":2778,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ [`slice`]: slice/index.html","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2779,"byte_end":2810,"line_start":43,"line_end":43,"column_start":1,"column_end":32}},{"value":"/ [`prelude`]: prelude/index.html","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2811,"byte_end":2846,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/ [`serde`]: https://crates.io/crates/serde","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2847,"byte_end":2892,"line_start":45,"line_end":45,"column_start":1,"column_end":46}},{"value":"/ [`vec`]: vec/index.html","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2893,"byte_end":2920,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"warn(missing_docs, missing_copy_implementations,\n       missing_debug_implementations, trivial_numeric_casts,\n       unused_extern_crates, unused_import_braces, future_incompatible,\n       rust_2018_compatibility, rust_2018_idioms, clippy :: all)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":2922,"byte_end":3191,"line_start":48,"line_end":59,"column_start":1,"column_end":3}},{"value":"allow(clippy :: verbose_bit_mask, clippy :: cast_lossless)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3192,"byte_end":3250,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"no_std","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3285,"byte_end":3291,"line_start":61,"line_end":61,"column_start":35,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":342},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5579,"byte_end":5583,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"bf16","qualname":"::bfloat::bf16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-bit floating point type implementing the [`bfloat16`] format.","sig":null,"attributes":[{"value":"/ A 16-bit floating point type implementing the [`bfloat16`] format.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":4631,"byte_end":4701,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":4702,"byte_end":4705,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The [`bfloat16`] floating point format is a truncated 16-bit version of the IEEE 754 standard","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":4706,"byte_end":4803,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ `binary32`, a.k.a `f32`. [`bf16`] has approximately the same dynamic range as `f32` by having","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":4804,"byte_end":4901,"line_start":16,"line_end":16,"column_start":1,"column_end":98}},{"value":"/ a lower precision than [`f16`]. While [`f16`] has a precision of 11 bits, [`bf16`] has a","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":4902,"byte_end":4994,"line_start":17,"line_end":17,"column_start":1,"column_end":93}},{"value":"/ precision of only 8 bits.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":4995,"byte_end":5024,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5025,"byte_end":5028,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Like [`f16`], [`bf16`] does not offer arithmetic operations as it is intended for compact","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5029,"byte_end":5122,"line_start":20,"line_end":20,"column_start":1,"column_end":94}},{"value":"/ storage rather than calculations. Operations should be performed with `f32` or higher-precision","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5123,"byte_end":5222,"line_start":21,"line_end":21,"column_start":1,"column_end":100}},{"value":"/ types and converted to/from [`bf16`] as necessary.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5223,"byte_end":5277,"line_start":22,"line_end":22,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5278,"byte_end":5281,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`bfloat16`]: https://en.wikipedia.org/wiki/Bfloat16_floating-point_format","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5282,"byte_end":5360,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ [`bf16`]: struct.bf16.html","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5361,"byte_end":5391,"line_start":25,"line_end":25,"column_start":1,"column_end":31}},{"value":"/ [`f16`]: struct.f16.html","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5392,"byte_end":5420,"line_start":26,"line_end":26,"column_start":1,"column_end":29}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5421,"byte_end":5451,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"repr(transparent)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5484,"byte_end":5504,"line_start":29,"line_end":29,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5707,"byte_end":5716,"line_start":36,"line_end":36,"column_start":18,"column_end":27},"name":"from_bits","qualname":"<bf16>::from_bits","value":"pub const fn from_bits(u16) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`](struct.bf16.html) value from the raw bits.\n","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`](struct.bf16.html) value from the raw bits.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5607,"byte_end":5675,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5680,"byte_end":5689,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6149,"byte_end":6157,"line_start":46,"line_end":46,"column_start":12,"column_end":20},"name":"from_f32","qualname":"<bf16>::from_f32","value":"pub fn from_f32(f32) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`](struct.bf16.html) value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`](struct.bf16.html) value from a 32-bit floating point value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5768,"byte_end":5853,"line_start":40,"line_end":40,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5858,"byte_end":5861,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is too large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5866,"byte_end":5955,"line_start":42,"line_end":42,"column_start":5,"column_end":91}},{"value":"/ Subnormal values that are too tiny to be represented will result in ±0. All other values","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5960,"byte_end":6053,"line_start":43,"line_end":43,"column_start":5,"column_end":97}},{"value":"/ are truncated and rounded to the nearest representable value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6058,"byte_end":6123,"line_start":44,"line_end":44,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6128,"byte_end":6137,"line_start":45,"line_end":45,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6702,"byte_end":6710,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"from_f64","qualname":"<bf16>::from_f64","value":"pub fn from_f64(f64) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a [`bf16`](struct.bf16.html) value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a [`bf16`](struct.bf16.html) value from a 64-bit floating point value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6233,"byte_end":6318,"line_start":50,"line_end":50,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6323,"byte_end":6326,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit, ±∞ will result. NaN values are preserved.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6331,"byte_end":6419,"line_start":52,"line_end":52,"column_start":5,"column_end":90}},{"value":"/ 64-bit subnormal values are too tiny to be represented and result in ±0. Exponents that","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6424,"byte_end":6516,"line_start":53,"line_end":53,"column_start":5,"column_end":96}},{"value":"/ underflow the minimum exponent will result in subnormals or ±0. All other values are","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6521,"byte_end":6610,"line_start":54,"line_end":54,"column_start":5,"column_end":93}},{"value":"/ truncated and rounded to the nearest representable value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6615,"byte_end":6676,"line_start":55,"line_end":55,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6681,"byte_end":6690,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6899,"byte_end":6906,"line_start":63,"line_end":63,"column_start":18,"column_end":25},"name":"to_bits","qualname":"<bf16>::to_bits","value":"pub const fn to_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`](struct.bf16.html) into the underlying bit representation.\n","sig":null,"attributes":[{"value":"/ Converts a [`bf16`](struct.bf16.html) into the underlying bit representation.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6786,"byte_end":6867,"line_start":61,"line_end":61,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6872,"byte_end":6881,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7292,"byte_end":7303,"line_start":78,"line_end":78,"column_start":12,"column_end":23},"name":"to_le_bytes","qualname":"<bf16>::to_le_bytes","value":"pub fn to_le_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the memory representation of the underlying bit representation as a byte array in\n little-endian byte order.","sig":null,"attributes":[{"value":"/ Return the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":6948,"byte_end":7040,"line_start":67,"line_end":67,"column_start":5,"column_end":97}},{"value":"/ little-endian byte order.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7045,"byte_end":7074,"line_start":68,"line_end":68,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7079,"byte_end":7082,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7087,"byte_end":7101,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7106,"byte_end":7109,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7114,"byte_end":7125,"line_start":72,"line_end":72,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7130,"byte_end":7157,"line_start":73,"line_end":73,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_le_bytes();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7162,"byte_end":7213,"line_start":74,"line_end":74,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, [0x48, 0x41]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7218,"byte_end":7254,"line_start":75,"line_end":75,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7259,"byte_end":7266,"line_start":76,"line_end":76,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7271,"byte_end":7280,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7714,"byte_end":7725,"line_start":93,"line_end":93,"column_start":12,"column_end":23},"name":"to_be_bytes","qualname":"<bf16>::to_be_bytes","value":"pub fn to_be_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the memory representation of the underlying bit representation as a byte array in\n big-endian (network) byte order.","sig":null,"attributes":[{"value":"/ Return the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7363,"byte_end":7455,"line_start":82,"line_end":82,"column_start":5,"column_end":97}},{"value":"/ big-endian (network) byte order.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7460,"byte_end":7496,"line_start":83,"line_end":83,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7501,"byte_end":7504,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7509,"byte_end":7523,"line_start":85,"line_end":85,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7528,"byte_end":7531,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7536,"byte_end":7547,"line_start":87,"line_end":87,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7552,"byte_end":7579,"line_start":88,"line_end":88,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_be_bytes();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7584,"byte_end":7635,"line_start":89,"line_end":89,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, [0x41, 0x48]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7640,"byte_end":7676,"line_start":90,"line_end":90,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7681,"byte_end":7688,"line_start":91,"line_end":91,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7693,"byte_end":7702,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8377,"byte_end":8388,"line_start":115,"line_end":115,"column_start":12,"column_end":23},"name":"to_ne_bytes","qualname":"<bf16>::to_ne_bytes","value":"pub fn to_ne_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the memory representation of the underlying bit representation as a byte array in\n native byte order.","sig":null,"attributes":[{"value":"/ Return the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7785,"byte_end":7877,"line_start":97,"line_end":97,"column_start":5,"column_end":97}},{"value":"/ native byte order.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7882,"byte_end":7904,"line_start":98,"line_end":98,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7909,"byte_end":7912,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code should use `to_be_bytes`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":7917,"byte_end":8011,"line_start":100,"line_end":100,"column_start":5,"column_end":99}},{"value":"/ or `to_le_bytes`, as appropriate, instead.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8016,"byte_end":8062,"line_start":101,"line_end":101,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8067,"byte_end":8070,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8075,"byte_end":8089,"line_start":103,"line_end":103,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8094,"byte_end":8097,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8102,"byte_end":8113,"line_start":105,"line_end":105,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8118,"byte_end":8145,"line_start":106,"line_end":106,"column_start":5,"column_end":32}},{"value":"/ let bytes = bf16::from_f32(12.5).to_ne_bytes();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8150,"byte_end":8201,"line_start":107,"line_end":107,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes, if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8206,"byte_end":8260,"line_start":108,"line_end":108,"column_start":5,"column_end":59}},{"value":"/     [0x41, 0x48]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8265,"byte_end":8285,"line_start":109,"line_end":109,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8290,"byte_end":8302,"line_start":110,"line_end":110,"column_start":5,"column_end":17}},{"value":"/     [0x48, 0x41]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8307,"byte_end":8327,"line_start":111,"line_end":111,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8332,"byte_end":8339,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8344,"byte_end":8351,"line_start":113,"line_end":113,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8356,"byte_end":8365,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8764,"byte_end":8777,"line_start":129,"line_end":129,"column_start":12,"column_end":25},"name":"from_le_bytes","qualname":"<bf16>::from_le_bytes","value":"pub fn from_le_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Create a floating point value from its representation as a byte array in little endian.","sig":null,"attributes":[{"value":"/ Create a floating point value from its representation as a byte array in little endian.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8448,"byte_end":8539,"line_start":119,"line_end":119,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8544,"byte_end":8547,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8552,"byte_end":8566,"line_start":121,"line_end":121,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8571,"byte_end":8574,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8579,"byte_end":8590,"line_start":123,"line_end":123,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8595,"byte_end":8622,"line_start":124,"line_end":124,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_le_bytes([0x48, 0x41]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8627,"byte_end":8677,"line_start":125,"line_end":125,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8682,"byte_end":8726,"line_start":126,"line_end":126,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8731,"byte_end":8738,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8743,"byte_end":8752,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9179,"byte_end":9192,"line_start":143,"line_end":143,"column_start":12,"column_end":25},"name":"from_be_bytes","qualname":"<bf16>::from_be_bytes","value":"pub fn from_be_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Create a floating point value from its representation as a byte array in big endian.","sig":null,"attributes":[{"value":"/ Create a floating point value from its representation as a byte array in big endian.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8866,"byte_end":8954,"line_start":133,"line_end":133,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8959,"byte_end":8962,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8967,"byte_end":8981,"line_start":135,"line_end":135,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8986,"byte_end":8989,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":8994,"byte_end":9005,"line_start":137,"line_end":137,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9010,"byte_end":9037,"line_start":138,"line_end":138,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_be_bytes([0x41, 0x48]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9042,"byte_end":9092,"line_start":139,"line_end":139,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9097,"byte_end":9141,"line_start":140,"line_end":140,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9146,"byte_end":9153,"line_start":141,"line_end":141,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9158,"byte_end":9167,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9864,"byte_end":9877,"line_start":164,"line_end":164,"column_start":12,"column_end":25},"name":"from_ne_bytes","qualname":"<bf16>::from_ne_bytes","value":"pub fn from_ne_bytes([u8; ]) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Create a floating point value from its representation as a byte array in native endian.","sig":null,"attributes":[{"value":"/ Create a floating point value from its representation as a byte array in native endian.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9281,"byte_end":9372,"line_start":147,"line_end":147,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9377,"byte_end":9380,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code likely wants to use","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9385,"byte_end":9474,"line_start":149,"line_end":149,"column_start":5,"column_end":94}},{"value":"/ `from_be_bytes` or `from_le_bytes`, as appropriate instead.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9479,"byte_end":9542,"line_start":150,"line_end":150,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9547,"byte_end":9550,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9555,"byte_end":9569,"line_start":152,"line_end":152,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9574,"byte_end":9577,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9582,"byte_end":9593,"line_start":154,"line_end":154,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9598,"byte_end":9625,"line_start":155,"line_end":155,"column_start":5,"column_end":32}},{"value":"/ let value = bf16::from_ne_bytes(if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9630,"byte_end":9698,"line_start":156,"line_end":156,"column_start":5,"column_end":73}},{"value":"/     [0x41, 0x48]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9703,"byte_end":9723,"line_start":157,"line_end":157,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9728,"byte_end":9740,"line_start":158,"line_end":158,"column_start":5,"column_end":17}},{"value":"/     [0x48, 0x41]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9745,"byte_end":9765,"line_start":159,"line_end":159,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9770,"byte_end":9777,"line_start":160,"line_end":160,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, bf16::from_f32(12.5));","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9782,"byte_end":9826,"line_start":161,"line_end":161,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9831,"byte_end":9838,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9843,"byte_end":9852,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10155,"byte_end":10161,"line_start":172,"line_end":172,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<bf16>::to_f32","value":"pub fn to_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`](struct.bf16.html) value into an `f32` value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`](struct.bf16.html) value into an `f32` value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":9966,"byte_end":10034,"line_start":168,"line_end":168,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10039,"byte_end":10042,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in `f32`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10047,"byte_end":10129,"line_start":170,"line_end":170,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10134,"byte_end":10143,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10414,"byte_end":10420,"line_start":180,"line_end":180,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<bf16>::to_f64","value":"pub fn to_f64(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`bf16`](struct.bf16.html) value into an `f64` value.","sig":null,"attributes":[{"value":"/ Converts a [`bf16`](struct.bf16.html) value into an `f64` value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10225,"byte_end":10293,"line_start":176,"line_end":176,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10298,"byte_end":10301,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all values can be represented exactly in `f64`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10306,"byte_end":10388,"line_start":178,"line_end":178,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10393,"byte_end":10402,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10820,"byte_end":10826,"line_start":198,"line_end":198,"column_start":18,"column_end":24},"name":"is_nan","qualname":"<bf16>::is_nan","value":"pub const fn is_nan(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is NaN and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is NaN and `false` otherwise.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10484,"byte_end":10546,"line_start":184,"line_end":184,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10551,"byte_end":10554,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10559,"byte_end":10573,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10578,"byte_end":10581,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10586,"byte_end":10597,"line_start":188,"line_end":188,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10602,"byte_end":10629,"line_start":189,"line_end":189,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10634,"byte_end":10637,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10642,"byte_end":10666,"line_start":191,"line_end":191,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10671,"byte_end":10707,"line_start":192,"line_end":192,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10712,"byte_end":10715,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ assert!(nan.is_nan());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10720,"byte_end":10746,"line_start":194,"line_end":194,"column_start":5,"column_end":31}},{"value":"/ assert!(!f.is_nan());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10751,"byte_end":10776,"line_start":195,"line_end":195,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10781,"byte_end":10788,"line_start":196,"line_end":196,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10793,"byte_end":10802,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11401,"byte_end":11412,"line_start":221,"line_end":221,"column_start":18,"column_end":29},"name":"is_infinite","qualname":"<bf16>::is_infinite","value":"pub const fn is_infinite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is ±∞ and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is ±∞ and `false` otherwise.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10893,"byte_end":10957,"line_start":202,"line_end":202,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10962,"byte_end":10965,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10970,"byte_end":10984,"line_start":204,"line_end":204,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10989,"byte_end":10992,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":10997,"byte_end":11008,"line_start":206,"line_end":206,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11013,"byte_end":11040,"line_start":207,"line_end":207,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11045,"byte_end":11048,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11053,"byte_end":11088,"line_start":209,"line_end":209,"column_start":5,"column_end":40}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11093,"byte_end":11122,"line_start":210,"line_end":210,"column_start":5,"column_end":34}},{"value":"/ let neg_inf = bf16::NEG_INFINITY;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11127,"byte_end":11164,"line_start":211,"line_end":211,"column_start":5,"column_end":42}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11169,"byte_end":11193,"line_start":212,"line_end":212,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11198,"byte_end":11201,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_infinite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11206,"byte_end":11236,"line_start":214,"line_end":214,"column_start":5,"column_end":35}},{"value":"/ assert!(!nan.is_infinite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11241,"byte_end":11273,"line_start":215,"line_end":215,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11278,"byte_end":11281,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ assert!(inf.is_infinite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11286,"byte_end":11317,"line_start":217,"line_end":217,"column_start":5,"column_end":36}},{"value":"/ assert!(neg_inf.is_infinite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11322,"byte_end":11357,"line_start":218,"line_end":218,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11362,"byte_end":11369,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11374,"byte_end":11383,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11979,"byte_end":11988,"line_start":244,"line_end":244,"column_start":18,"column_end":27},"name":"is_finite","qualname":"<bf16>::is_finite","value":"pub const fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if this number is neither infinite nor NaN.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11480,"byte_end":11542,"line_start":225,"line_end":225,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11547,"byte_end":11550,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11555,"byte_end":11569,"line_start":227,"line_end":227,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11574,"byte_end":11577,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11582,"byte_end":11593,"line_start":229,"line_end":229,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11598,"byte_end":11625,"line_start":230,"line_end":230,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11630,"byte_end":11633,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11638,"byte_end":11673,"line_start":232,"line_end":232,"column_start":5,"column_end":40}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11678,"byte_end":11707,"line_start":233,"line_end":233,"column_start":5,"column_end":34}},{"value":"/ let neg_inf = bf16::NEG_INFINITY;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11712,"byte_end":11749,"line_start":234,"line_end":234,"column_start":5,"column_end":42}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11754,"byte_end":11778,"line_start":235,"line_end":235,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11783,"byte_end":11786,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_finite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11791,"byte_end":11818,"line_start":237,"line_end":237,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11823,"byte_end":11826,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ assert!(!nan.is_finite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11831,"byte_end":11861,"line_start":239,"line_end":239,"column_start":5,"column_end":35}},{"value":"/ assert!(!inf.is_finite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11866,"byte_end":11896,"line_start":240,"line_end":240,"column_start":5,"column_end":35}},{"value":"/ assert!(!neg_inf.is_finite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11901,"byte_end":11935,"line_start":241,"line_end":241,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11940,"byte_end":11947,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":11952,"byte_end":11961,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12738,"byte_end":12747,"line_start":270,"line_end":270,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<bf16>::is_normal","value":"pub fn is_normal(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal, or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal, or NaN.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12056,"byte_end":12134,"line_start":248,"line_end":248,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12139,"byte_end":12142,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12147,"byte_end":12161,"line_start":250,"line_end":250,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12166,"byte_end":12169,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12174,"byte_end":12185,"line_start":252,"line_end":252,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12190,"byte_end":12217,"line_start":253,"line_end":253,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12222,"byte_end":12225,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ let min = bf16::MIN_POSITIVE;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12230,"byte_end":12263,"line_start":255,"line_end":255,"column_start":5,"column_end":38}},{"value":"/ let max = bf16::MAX;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12268,"byte_end":12292,"line_start":256,"line_end":256,"column_start":5,"column_end":29}},{"value":"/ let lower_than_min = bf16::from_f32(1.0e-39_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12297,"byte_end":12350,"line_start":257,"line_end":257,"column_start":5,"column_end":58}},{"value":"/ let zero = bf16::from_f32(0.0_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12355,"byte_end":12394,"line_start":258,"line_end":258,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12399,"byte_end":12402,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ assert!(min.is_normal());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12407,"byte_end":12436,"line_start":260,"line_end":260,"column_start":5,"column_end":34}},{"value":"/ assert!(max.is_normal());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12441,"byte_end":12470,"line_start":261,"line_end":261,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12475,"byte_end":12478,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ assert!(!zero.is_normal());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12483,"byte_end":12514,"line_start":263,"line_end":263,"column_start":5,"column_end":36}},{"value":"/ assert!(!bf16::NAN.is_normal());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12519,"byte_end":12555,"line_start":264,"line_end":264,"column_start":5,"column_end":41}},{"value":"/ assert!(!bf16::INFINITY.is_normal());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12560,"byte_end":12601,"line_start":265,"line_end":265,"column_start":5,"column_end":46}},{"value":"/ // Values between 0 and `min` are subnormal.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12606,"byte_end":12654,"line_start":266,"line_end":266,"column_start":5,"column_end":53}},{"value":"/ assert!(!lower_than_min.is_normal());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12659,"byte_end":12700,"line_start":267,"line_end":267,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12705,"byte_end":12712,"line_start":268,"line_end":268,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12717,"byte_end":12726,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13383,"byte_end":13391,"line_start":292,"line_end":292,"column_start":12,"column_end":20},"name":"classify","qualname":"<bf16>::classify","value":"pub fn classify(Self) -> FpCategory","parent":null,"children":[],"decl_id":null,"docs":" Returns the floating point category of the number.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12850,"byte_end":12904,"line_start":275,"line_end":275,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12909,"byte_end":12912,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ If only one property is going to be tested, it is generally faster to use the specific","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":12917,"byte_end":13007,"line_start":277,"line_end":277,"column_start":5,"column_end":95}},{"value":"/ predicate instead.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13012,"byte_end":13034,"line_start":278,"line_end":278,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13039,"byte_end":13042,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13047,"byte_end":13061,"line_start":280,"line_end":280,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13066,"byte_end":13069,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13074,"byte_end":13085,"line_start":282,"line_end":282,"column_start":5,"column_end":16}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13090,"byte_end":13119,"line_start":283,"line_end":283,"column_start":5,"column_end":34}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13124,"byte_end":13151,"line_start":284,"line_end":284,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13156,"byte_end":13159,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ let num = bf16::from_f32(12.4_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13164,"byte_end":13203,"line_start":286,"line_end":286,"column_start":5,"column_end":44}},{"value":"/ let inf = bf16::INFINITY;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13208,"byte_end":13237,"line_start":287,"line_end":287,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13242,"byte_end":13245,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(num.classify(), FpCategory::Normal);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13250,"byte_end":13301,"line_start":289,"line_end":289,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(inf.classify(), FpCategory::Infinite);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13306,"byte_end":13359,"line_start":290,"line_end":290,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13364,"byte_end":13371,"line_start":291,"line_end":291,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14330,"byte_end":14336,"line_start":322,"line_end":322,"column_start":12,"column_end":18},"name":"signum","qualname":"<bf16>::signum","value":"pub fn signum(Self) -> bf16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13759,"byte_end":13815,"line_start":304,"line_end":304,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13820,"byte_end":13823,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ * 1.0 if the number is positive, +0.0 or `INFINITY`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13828,"byte_end":13883,"line_start":306,"line_end":306,"column_start":5,"column_end":60}},{"value":"/ * −1.0 if the number is negative, −0.0` or `NEG_INFINITY`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13888,"byte_end":13953,"line_start":307,"line_end":307,"column_start":5,"column_end":66}},{"value":"/ * NaN if the number is NaN","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13958,"byte_end":13988,"line_start":308,"line_end":308,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":13993,"byte_end":13996,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14001,"byte_end":14015,"line_start":310,"line_end":310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14020,"byte_end":14023,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14028,"byte_end":14039,"line_start":312,"line_end":312,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14044,"byte_end":14071,"line_start":313,"line_end":313,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14076,"byte_end":14079,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let f = bf16::from_f32(3.5_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14084,"byte_end":14120,"line_start":315,"line_end":315,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14125,"byte_end":14128,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.signum(), bf16::from_f32(1.0));","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14133,"byte_end":14181,"line_start":317,"line_end":317,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(bf16::NEG_INFINITY.signum(), bf16::from_f32(-1.0));","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14186,"byte_end":14252,"line_start":318,"line_end":318,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14257,"byte_end":14260,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ assert!(bf16::NAN.signum().is_nan());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14265,"byte_end":14306,"line_start":320,"line_end":320,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14311,"byte_end":14318,"line_start":321,"line_end":321,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15120,"byte_end":15136,"line_start":350,"line_end":350,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<bf16>::is_sign_positive","value":"pub const fn is_sign_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a positive sign, including +0.0, NaNs with a\n positive sign bit and +∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a positive sign, including +0.0, NaNs with a","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14544,"byte_end":14633,"line_start":332,"line_end":332,"column_start":5,"column_end":94}},{"value":"/ positive sign bit and +∞.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14638,"byte_end":14669,"line_start":333,"line_end":333,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14674,"byte_end":14677,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14682,"byte_end":14696,"line_start":335,"line_end":335,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14701,"byte_end":14704,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14709,"byte_end":14720,"line_start":337,"line_end":337,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14725,"byte_end":14752,"line_start":338,"line_end":338,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14757,"byte_end":14760,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14765,"byte_end":14789,"line_start":340,"line_end":340,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14794,"byte_end":14830,"line_start":341,"line_end":341,"column_start":5,"column_end":41}},{"value":"/ let g = bf16::from_f32(-7.0_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14835,"byte_end":14872,"line_start":342,"line_end":342,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14877,"byte_end":14880,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_sign_positive());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14885,"byte_end":14919,"line_start":344,"line_end":344,"column_start":5,"column_end":39}},{"value":"/ assert!(!g.is_sign_positive());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14924,"byte_end":14959,"line_start":345,"line_end":345,"column_start":5,"column_end":40}},{"value":"/ // NaN can be either positive or negative","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":14964,"byte_end":15009,"line_start":346,"line_end":346,"column_start":5,"column_end":50}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15014,"byte_end":15076,"line_start":347,"line_end":347,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15081,"byte_end":15088,"line_start":348,"line_end":348,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15093,"byte_end":15102,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15774,"byte_end":15790,"line_start":372,"line_end":372,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<bf16>::is_sign_negative","value":"pub const fn is_sign_negative(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a negative sign, including −0.0, NaNs with a\n negative sign bit and −∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a negative sign, including −0.0, NaNs with a","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15196,"byte_end":15287,"line_start":354,"line_end":354,"column_start":5,"column_end":94}},{"value":"/ negative sign bit and −∞.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15292,"byte_end":15325,"line_start":355,"line_end":355,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15330,"byte_end":15333,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15338,"byte_end":15352,"line_start":357,"line_end":357,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15357,"byte_end":15360,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15365,"byte_end":15376,"line_start":359,"line_end":359,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15381,"byte_end":15408,"line_start":360,"line_end":360,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15413,"byte_end":15416,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ let nan = bf16::NAN;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15421,"byte_end":15445,"line_start":362,"line_end":362,"column_start":5,"column_end":29}},{"value":"/ let f = bf16::from_f32(7.0f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15450,"byte_end":15485,"line_start":363,"line_end":363,"column_start":5,"column_end":40}},{"value":"/ let g = bf16::from_f32(-7.0f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15490,"byte_end":15526,"line_start":364,"line_end":364,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15531,"byte_end":15534,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_sign_negative());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15539,"byte_end":15574,"line_start":366,"line_end":366,"column_start":5,"column_end":40}},{"value":"/ assert!(g.is_sign_negative());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15579,"byte_end":15613,"line_start":367,"line_end":367,"column_start":5,"column_end":39}},{"value":"/ // NaN can be either positive or negative","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15618,"byte_end":15663,"line_start":368,"line_end":368,"column_start":5,"column_end":50}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15668,"byte_end":15730,"line_start":369,"line_end":369,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15735,"byte_end":15742,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15747,"byte_end":15756,"line_start":371,"line_end":371,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":50},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15948,"byte_end":15954,"line_start":377,"line_end":377,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::bfloat::bf16::DIGITS","value":"u32","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Approximate number of [`bf16`](struct.bf16.html) significant digits in base 10.\n","sig":null,"attributes":[{"value":"/ Approximate number of [`bf16`](struct.bf16.html) significant digits in base 10.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15850,"byte_end":15933,"line_start":376,"line_end":376,"column_start":5,"column_end":88}}]},{"kind":"Const","id":{"krate":0,"index":51},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16188,"byte_end":16195,"line_start":382,"line_end":382,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::bfloat::bf16::EPSILON","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html)\n [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value.","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":15969,"byte_end":15999,"line_start":378,"line_end":378,"column_start":5,"column_end":35}},{"value":"/ [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16004,"byte_end":16079,"line_start":379,"line_end":379,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16084,"byte_end":16087,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ This is the difference between 1.0 and the next largest representable number.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16092,"byte_end":16173,"line_start":381,"line_end":381,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":52},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16296,"byte_end":16304,"line_start":384,"line_end":384,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::bfloat::bf16::INFINITY","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) positive Infinity (+∞).\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) positive Infinity (+∞).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16225,"byte_end":16281,"line_start":383,"line_end":383,"column_start":5,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":53},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16419,"byte_end":16434,"line_start":386,"line_end":386,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::bfloat::bf16::MANTISSA_DIGITS","value":"u32","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Number of [`bf16`](struct.bf16.html) significant digits in base 2.\n","sig":null,"attributes":[{"value":"/ Number of [`bf16`](struct.bf16.html) significant digits in base 2.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16334,"byte_end":16404,"line_start":385,"line_end":385,"column_start":5,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":54},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16516,"byte_end":16519,"line_start":388,"line_end":388,"column_start":15,"column_end":18},"name":"MAX","qualname":"::bfloat::bf16::MAX","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Largest finite [`bf16`](struct.bf16.html) value.\n","sig":null,"attributes":[{"value":"/ Largest finite [`bf16`](struct.bf16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16449,"byte_end":16501,"line_start":387,"line_end":387,"column_start":5,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":55},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16630,"byte_end":16640,"line_start":390,"line_end":390,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::bfloat::bf16::MAX_10_EXP","value":"i32","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Maximum possible [`bf16`](struct.bf16.html) power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible [`bf16`](struct.bf16.html) power of 10 exponent.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16546,"byte_end":16615,"line_start":389,"line_end":389,"column_start":5,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":56},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16739,"byte_end":16746,"line_start":392,"line_end":392,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::bfloat::bf16::MAX_EXP","value":"i32","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Maximum possible [`bf16`](struct.bf16.html) power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible [`bf16`](struct.bf16.html) power of 2 exponent.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16656,"byte_end":16724,"line_start":391,"line_end":391,"column_start":5,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":57},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16831,"byte_end":16834,"line_start":394,"line_end":394,"column_start":15,"column_end":18},"name":"MIN","qualname":"::bfloat::bf16::MIN","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Smallest finite [`bf16`](struct.bf16.html) value.\n","sig":null,"attributes":[{"value":"/ Smallest finite [`bf16`](struct.bf16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16763,"byte_end":16816,"line_start":393,"line_end":393,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":58},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16952,"byte_end":16962,"line_start":396,"line_end":396,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::bfloat::bf16::MIN_10_EXP","value":"i32","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Minimum possible normal [`bf16`](struct.bf16.html) power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Minimum possible normal [`bf16`](struct.bf16.html) power of 10 exponent.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16861,"byte_end":16937,"line_start":395,"line_end":395,"column_start":5,"column_end":81}}]},{"kind":"Const","id":{"krate":0,"index":59},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17090,"byte_end":17097,"line_start":398,"line_end":398,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::bfloat::bf16::MIN_EXP","value":"i32","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal [`bf16`](struct.bf16.html) power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal [`bf16`](struct.bf16.html) power of 2 exponent.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":16979,"byte_end":17075,"line_start":397,"line_end":397,"column_start":5,"column_end":101}}]},{"kind":"Const","id":{"krate":0,"index":60},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17192,"byte_end":17204,"line_start":400,"line_end":400,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::bfloat::bf16::MIN_POSITIVE","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Smallest positive normal [`bf16`](struct.bf16.html) value.\n","sig":null,"attributes":[{"value":"/ Smallest positive normal [`bf16`](struct.bf16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17115,"byte_end":17177,"line_start":399,"line_end":399,"column_start":5,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":61},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17299,"byte_end":17302,"line_start":402,"line_end":402,"column_start":15,"column_end":18},"name":"NAN","qualname":"::bfloat::bf16::NAN","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) Not a Number (NaN).\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) Not a Number (NaN).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17234,"byte_end":17284,"line_start":401,"line_end":401,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":62},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17403,"byte_end":17415,"line_start":404,"line_end":404,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::bfloat::bf16::NEG_INFINITY","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) negative infinity (-∞).\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) negative infinity (-∞).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17332,"byte_end":17388,"line_start":403,"line_end":403,"column_start":5,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":63},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17543,"byte_end":17548,"line_start":406,"line_end":406,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::bfloat::bf16::RADIX","value":"u32","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of [`bf16`](struct.bf16.html).\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of [`bf16`](struct.bf16.html).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17445,"byte_end":17528,"line_start":405,"line_end":405,"column_start":5,"column_end":88}}]},{"kind":"Const","id":{"krate":0,"index":64},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17643,"byte_end":17665,"line_start":409,"line_end":409,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::bfloat::bf16::MIN_POSITIVE_SUBNORMAL","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Minimum positive subnormal [`bf16`](struct.bf16.html) value.\n","sig":null,"attributes":[{"value":"/ Minimum positive subnormal [`bf16`](struct.bf16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17564,"byte_end":17628,"line_start":408,"line_end":408,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":65},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17765,"byte_end":17778,"line_start":411,"line_end":411,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::bfloat::bf16::MAX_SUBNORMAL","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Maximum subnormal [`bf16`](struct.bf16.html) value.\n","sig":null,"attributes":[{"value":"/ Maximum subnormal [`bf16`](struct.bf16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17695,"byte_end":17750,"line_start":410,"line_end":410,"column_start":5,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":66},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17856,"byte_end":17859,"line_start":414,"line_end":414,"column_start":15,"column_end":18},"name":"ONE","qualname":"::bfloat::bf16::ONE","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 1\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 1","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17809,"byte_end":17841,"line_start":413,"line_end":413,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":67},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17936,"byte_end":17940,"line_start":416,"line_end":416,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::bfloat::bf16::ZERO","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 0\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 0","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17889,"byte_end":17921,"line_start":415,"line_end":415,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":68},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18018,"byte_end":18026,"line_start":418,"line_end":418,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::bfloat::bf16::NEG_ZERO","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) -0\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) -0","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":17970,"byte_end":18003,"line_start":417,"line_end":417,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":69},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18124,"byte_end":18125,"line_start":421,"line_end":421,"column_start":15,"column_end":16},"name":"E","qualname":"::bfloat::bf16::E","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) Euler's number (ℯ).\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) Euler's number (ℯ).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18057,"byte_end":18109,"line_start":420,"line_end":420,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":70},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18227,"byte_end":18229,"line_start":423,"line_end":423,"column_start":15,"column_end":17},"name":"PI","qualname":"::bfloat::bf16::PI","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) Archimedes' constant (π).\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) Archimedes' constant (π).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18155,"byte_end":18212,"line_start":422,"line_end":422,"column_start":5,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":71},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18309,"byte_end":18318,"line_start":425,"line_end":425,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::bfloat::bf16::FRAC_1_PI","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 1/π\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 1/π","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18259,"byte_end":18294,"line_start":424,"line_end":424,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":72},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18400,"byte_end":18413,"line_start":427,"line_end":427,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::bfloat::bf16::FRAC_1_SQRT_2","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 1/√2\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 1/√2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18348,"byte_end":18385,"line_start":426,"line_end":426,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":73},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18493,"byte_end":18502,"line_start":429,"line_end":429,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::bfloat::bf16::FRAC_2_PI","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 2/π\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 2/π","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18443,"byte_end":18478,"line_start":428,"line_end":428,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":74},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18585,"byte_end":18599,"line_start":431,"line_end":431,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::bfloat::bf16::FRAC_2_SQRT_PI","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 2/√π\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 2/√π","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18532,"byte_end":18570,"line_start":430,"line_end":430,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":75},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18679,"byte_end":18688,"line_start":433,"line_end":433,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::bfloat::bf16::FRAC_PI_2","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) π/2\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) π/2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18629,"byte_end":18664,"line_start":432,"line_end":432,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":76},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18768,"byte_end":18777,"line_start":435,"line_end":435,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::bfloat::bf16::FRAC_PI_3","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) π/3\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) π/3","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18718,"byte_end":18753,"line_start":434,"line_end":434,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":77},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18857,"byte_end":18866,"line_start":437,"line_end":437,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::bfloat::bf16::FRAC_PI_4","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) π/4\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) π/4","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18807,"byte_end":18842,"line_start":436,"line_end":436,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":78},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18946,"byte_end":18955,"line_start":439,"line_end":439,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::bfloat::bf16::FRAC_PI_6","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) π/6\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) π/6","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18896,"byte_end":18931,"line_start":438,"line_end":438,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":79},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19035,"byte_end":19044,"line_start":441,"line_end":441,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::bfloat::bf16::FRAC_PI_8","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) π/8\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) π/8","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":18985,"byte_end":19020,"line_start":440,"line_end":440,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":80},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19131,"byte_end":19136,"line_start":443,"line_end":443,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::bfloat::bf16::LN_10","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 𝗅𝗇 10\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 𝗅𝗇 10","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19074,"byte_end":19116,"line_start":442,"line_end":442,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":81},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19222,"byte_end":19226,"line_start":445,"line_end":445,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::bfloat::bf16::LN_2","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 𝗅𝗇 2\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 𝗅𝗇 2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19166,"byte_end":19207,"line_start":444,"line_end":444,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":82},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19323,"byte_end":19330,"line_start":447,"line_end":447,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::bfloat::bf16::LOG10_E","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₁₀ℯ\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₁₀ℯ","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19256,"byte_end":19308,"line_start":446,"line_end":446,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":83},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19425,"byte_end":19432,"line_start":449,"line_end":449,"column_start":15,"column_end":22},"name":"LOG10_2","qualname":"::bfloat::bf16::LOG10_2","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₁₀2\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₁₀2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19360,"byte_end":19410,"line_start":448,"line_end":448,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":84},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19526,"byte_end":19532,"line_start":451,"line_end":451,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::bfloat::bf16::LOG2_E","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₂ℯ\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₂ℯ","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19462,"byte_end":19511,"line_start":450,"line_end":450,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":85},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19625,"byte_end":19632,"line_start":453,"line_end":453,"column_start":15,"column_end":22},"name":"LOG2_10","qualname":"::bfloat::bf16::LOG2_10","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₂10\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) 𝗅𝗈𝗀₂10","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19562,"byte_end":19610,"line_start":452,"line_end":452,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":86},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19712,"byte_end":19718,"line_start":455,"line_end":455,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::bfloat::bf16::SQRT_2","value":"bf16","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" [`bf16`](struct.bf16.html) √2\n","sig":null,"attributes":[{"value":"/ [`bf16`](struct.bf16.html) √2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19662,"byte_end":19697,"line_start":454,"line_end":454,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48975,"byte_end":48978,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"f16","qualname":"::binary16::f16","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-bit floating point type implementing the IEEE 754-2008 standard [`binary16`] a.k.a `half`\n format.","sig":null,"attributes":[{"value":"/ A 16-bit floating point type implementing the IEEE 754-2008 standard [`binary16`] a.k.a `half`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48163,"byte_end":48261,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"/ format.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48262,"byte_end":48273,"line_start":14,"line_end":14,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48274,"byte_end":48277,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This 16-bit floating point type is intended for efficient storage where the full range and","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48278,"byte_end":48372,"line_start":16,"line_end":16,"column_start":1,"column_end":95}},{"value":"/ precision of a larger floating point value is not required. Because [`f16`] is primarily for","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48373,"byte_end":48469,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"/ efficient storage, floating point operations such as addition, multiplication, etc. are not","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48470,"byte_end":48565,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ implemented. Operations should be performed with `f32` or higher-precision types and converted","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48566,"byte_end":48664,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ to/from [`f16`] as necessary.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48665,"byte_end":48698,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48699,"byte_end":48702,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [`f16`]: struct.f16.html","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48703,"byte_end":48731,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ [`binary16`]: https://en.wikipedia.org/wiki/Half-precision_floating-point_format","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48732,"byte_end":48816,"line_start":23,"line_end":23,"column_start":1,"column_end":85}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48817,"byte_end":48847,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"repr(transparent)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48880,"byte_end":48900,"line_start":26,"line_end":26,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":142},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49120,"byte_end":49126,"line_start":34,"line_end":34,"column_start":9,"column_end":15},"name":"consts","qualname":"::binary16::consts","value":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":410},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178}],"decl_id":null,"docs":" Useful `f16` constants.\n","sig":null,"attributes":[{"value":"deprecated(since = \"1.4.0\", note =\n             \"all constants moved to associated constants of [`f16`](../struct.f16.html)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":48986,"byte_end":49111,"line_start":30,"line_end":33,"column_start":1,"column_end":3}},{"value":"/ Useful `f16` constants.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49133,"byte_end":49160,"line_start":35,"line_end":35,"column_start":5,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":144},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49424,"byte_end":49430,"line_start":44,"line_end":44,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::binary16::consts::DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Approximate number of [`f16`](../struct.f16.html) significant digits in base 10.\n","sig":null,"attributes":[{"value":"/ Approximate number of [`f16`](../struct.f16.html) significant digits in base 10.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49187,"byte_end":49271,"line_start":39,"line_end":39,"column_start":5,"column_end":89}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::DIGITS`](../struct.f16.html#associatedconstant.DIGITS)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49276,"byte_end":49409,"line_start":40,"line_end":43,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":145},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49815,"byte_end":49822,"line_start":53,"line_end":53,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::binary16::consts::EPSILON","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html)\n [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value.","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49455,"byte_end":49486,"line_start":45,"line_end":45,"column_start":5,"column_end":36}},{"value":"/ [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49491,"byte_end":49566,"line_start":46,"line_end":46,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49571,"byte_end":49574,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ This is the difference between 1.0 and the next largest representable number.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49579,"byte_end":49660,"line_start":48,"line_end":48,"column_start":5,"column_end":86}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::EPSILON`](../struct.f16.html#associatedconstant.EPSILON)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49665,"byte_end":49800,"line_start":49,"line_end":52,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":146},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":50062,"byte_end":50070,"line_start":59,"line_end":59,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::binary16::consts::INFINITY","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) positive Infinity (+∞).\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) positive Infinity (+∞).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49848,"byte_end":49905,"line_start":54,"line_end":54,"column_start":5,"column_end":60}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::INFINITY`](../struct.f16.html#associatedconstant.INFINITY)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":49910,"byte_end":50047,"line_start":55,"line_end":58,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":147},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":50339,"byte_end":50354,"line_start":65,"line_end":65,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::binary16::consts::MANTISSA_DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Number of [`f16`](../struct.f16.html) significant digits in base 2.\n","sig":null,"attributes":[{"value":"/ Number of [`f16`](../struct.f16.html) significant digits in base 2.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":50097,"byte_end":50168,"line_start":60,"line_end":60,"column_start":5,"column_end":76}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MANTISSA_DIGITS`](../struct.f16.html#associatedconstant.MANTISSA_DIGITS)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":50173,"byte_end":50324,"line_start":61,"line_end":64,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":148},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":50588,"byte_end":50591,"line_start":71,"line_end":71,"column_start":15,"column_end":18},"name":"MAX","qualname":"::binary16::consts::MAX","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" Largest finite [`f16`](../struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Largest finite [`f16`](../struct.f16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":50388,"byte_end":50441,"line_start":66,"line_end":66,"column_start":5,"column_end":58}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MAX`](../struct.f16.html#associatedconstant.MAX)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":50446,"byte_end":50573,"line_start":67,"line_end":70,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":149},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":50844,"byte_end":50854,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::binary16::consts::MAX_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible [`f16`](../struct.f16.html) power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`](../struct.f16.html) power of 10 exponent.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":50613,"byte_end":50683,"line_start":72,"line_end":72,"column_start":5,"column_end":75}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MAX_10_EXP`](../struct.f16.html#associatedconstant.MAX_10_EXP)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":50688,"byte_end":50829,"line_start":73,"line_end":76,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":150},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":51107,"byte_end":51114,"line_start":83,"line_end":83,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::binary16::consts::MAX_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible [`f16`](../struct.f16.html) power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`](../struct.f16.html) power of 2 exponent.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":50883,"byte_end":50952,"line_start":78,"line_end":78,"column_start":5,"column_end":74}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MAX_EXP`](../struct.f16.html#associatedconstant.MAX_EXP)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":50957,"byte_end":51092,"line_start":79,"line_end":82,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":151},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":51341,"byte_end":51344,"line_start":89,"line_end":89,"column_start":15,"column_end":18},"name":"MIN","qualname":"::binary16::consts::MIN","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" Smallest finite [`f16`](../struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Smallest finite [`f16`](../struct.f16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":51140,"byte_end":51194,"line_start":84,"line_end":84,"column_start":5,"column_end":59}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MIN`](../struct.f16.html#associatedconstant.MIN)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":51199,"byte_end":51326,"line_start":85,"line_end":88,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":152},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":51604,"byte_end":51614,"line_start":95,"line_end":95,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::binary16::consts::MIN_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Minimum possible normal [`f16`](../struct.f16.html) power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Minimum possible normal [`f16`](../struct.f16.html) power of 10 exponent.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":51366,"byte_end":51443,"line_start":90,"line_end":90,"column_start":5,"column_end":82}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MIN_10_EXP`](../struct.f16.html#associatedconstant.MIN_10_EXP)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":51448,"byte_end":51589,"line_start":91,"line_end":94,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":153},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":51895,"byte_end":51902,"line_start":101,"line_end":101,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::binary16::consts::MIN_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal [`f16`](../struct.f16.html) power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal [`f16`](../struct.f16.html) power of 2 exponent.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":51643,"byte_end":51740,"line_start":96,"line_end":96,"column_start":5,"column_end":102}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MIN_EXP`](../struct.f16.html#associatedconstant.MIN_EXP)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":51745,"byte_end":51880,"line_start":97,"line_end":100,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":154},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":52156,"byte_end":52168,"line_start":107,"line_end":107,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::binary16::consts::MIN_POSITIVE","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" Smallest positive normal [`f16`](../struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Smallest positive normal [`f16`](../struct.f16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":51928,"byte_end":51991,"line_start":102,"line_end":102,"column_start":5,"column_end":68}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MIN_POSITIVE`](../struct.f16.html#associatedconstant.MIN_POSITIVE)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":51996,"byte_end":52141,"line_start":103,"line_end":106,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":155},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":52397,"byte_end":52400,"line_start":113,"line_end":113,"column_start":15,"column_end":18},"name":"NAN","qualname":"::binary16::consts::NAN","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) Not a Number (NaN).\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) Not a Number (NaN).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":52199,"byte_end":52250,"line_start":108,"line_end":108,"column_start":5,"column_end":56}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::NAN`](../struct.f16.html#associatedconstant.NAN)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":52255,"byte_end":52382,"line_start":109,"line_end":112,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":156},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":52644,"byte_end":52656,"line_start":119,"line_end":119,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::binary16::consts::NEG_INFINITY","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) negative infinity (-∞).\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) negative infinity (-∞).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":52422,"byte_end":52479,"line_start":114,"line_end":114,"column_start":5,"column_end":60}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::NEG_INFINITY`](../struct.f16.html#associatedconstant.NEG_INFINITY)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":52484,"byte_end":52629,"line_start":115,"line_end":118,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":157},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":52922,"byte_end":52927,"line_start":125,"line_end":125,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::binary16::consts::RADIX","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of [`f16`](../struct.f16.html).\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of [`f16`](../struct.f16.html).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":52687,"byte_end":52771,"line_start":120,"line_end":120,"column_start":5,"column_end":89}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::RADIX`](../struct.f16.html#associatedconstant.RADIX)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":52776,"byte_end":52907,"line_start":121,"line_end":124,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":158},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53202,"byte_end":53224,"line_start":132,"line_end":132,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::binary16::consts::MIN_POSITIVE_SUBNORMAL","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" Minimum positive subnormal [`f16`](../struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Minimum positive subnormal [`f16`](../struct.f16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":52952,"byte_end":53017,"line_start":127,"line_end":127,"column_start":5,"column_end":70}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MIN_POSITIVE_SUBNORMAL`](../struct.f16.html#associatedconstant.MIN_POSITIVE_SUBNORMAL)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53022,"byte_end":53187,"line_start":128,"line_end":131,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":159},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53488,"byte_end":53501,"line_start":138,"line_end":138,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::binary16::consts::MAX_SUBNORMAL","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" Maximum subnormal [`f16`](../struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Maximum subnormal [`f16`](../struct.f16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53265,"byte_end":53321,"line_start":133,"line_end":133,"column_start":5,"column_end":61}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::MAX_SUBNORMAL`](../struct.f16.html#associatedconstant.MAX_SUBNORMAL)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53326,"byte_end":53473,"line_start":134,"line_end":137,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":160},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53714,"byte_end":53717,"line_start":145,"line_end":145,"column_start":15,"column_end":18},"name":"ONE","qualname":"::binary16::consts::ONE","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 1\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 1","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53534,"byte_end":53567,"line_start":140,"line_end":140,"column_start":5,"column_end":38}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::ONE`](../struct.f16.html#associatedconstant.ONE)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53572,"byte_end":53699,"line_start":141,"line_end":144,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":161},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53921,"byte_end":53925,"line_start":151,"line_end":151,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::binary16::consts::ZERO","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 0\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 0","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53739,"byte_end":53772,"line_start":146,"line_end":146,"column_start":5,"column_end":38}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::ZERO`](../struct.f16.html#associatedconstant.ZERO)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53777,"byte_end":53906,"line_start":147,"line_end":150,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":162},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":54139,"byte_end":54147,"line_start":157,"line_end":157,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::binary16::consts::NEG_ZERO","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) -0\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) -0","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53948,"byte_end":53982,"line_start":152,"line_end":152,"column_start":5,"column_end":39}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::NEG_ZERO`](../struct.f16.html#associatedconstant.NEG_ZERO)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":53987,"byte_end":54124,"line_start":153,"line_end":156,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":163},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":54371,"byte_end":54372,"line_start":164,"line_end":164,"column_start":15,"column_end":16},"name":"E","qualname":"::binary16::consts::E","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) Euler's number (ℯ).\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) Euler's number (ℯ).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":54175,"byte_end":54228,"line_start":159,"line_end":159,"column_start":5,"column_end":56}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::E`](../struct.f16.html#associatedconstant.E)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":54233,"byte_end":54356,"line_start":160,"line_end":163,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":164},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":54595,"byte_end":54597,"line_start":170,"line_end":170,"column_start":15,"column_end":17},"name":"PI","qualname":"::binary16::consts::PI","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) Archimedes' constant (π).\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) Archimedes' constant (π).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":54392,"byte_end":54450,"line_start":165,"line_end":165,"column_start":5,"column_end":62}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::PI`](../struct.f16.html#associatedconstant.PI)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":54455,"byte_end":54580,"line_start":166,"line_end":169,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":165},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":54813,"byte_end":54822,"line_start":176,"line_end":176,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::binary16::consts::FRAC_1_PI","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 1/π\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 1/π","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":54618,"byte_end":54654,"line_start":171,"line_end":171,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_1_PI`](../struct.f16.html#associatedconstant.FRAC_1_PI)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":54659,"byte_end":54798,"line_start":172,"line_end":175,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":166},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":55055,"byte_end":55068,"line_start":182,"line_end":182,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::binary16::consts::FRAC_1_SQRT_2","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 1/√2\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 1/√2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":54850,"byte_end":54888,"line_start":177,"line_end":177,"column_start":5,"column_end":41}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_1_SQRT_2`](../struct.f16.html#associatedconstant.FRAC_1_SQRT_2)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":54893,"byte_end":55040,"line_start":178,"line_end":181,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":167},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":55295,"byte_end":55304,"line_start":188,"line_end":188,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::binary16::consts::FRAC_2_PI","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 2/π\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 2/π","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":55100,"byte_end":55136,"line_start":183,"line_end":183,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_2_PI`](../struct.f16.html#associatedconstant.FRAC_2_PI)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":55141,"byte_end":55280,"line_start":184,"line_end":187,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":168},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":55540,"byte_end":55554,"line_start":194,"line_end":194,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::binary16::consts::FRAC_2_SQRT_PI","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 2/√π\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 2/√π","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":55332,"byte_end":55371,"line_start":189,"line_end":189,"column_start":5,"column_end":41}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_2_SQRT_PI`](../struct.f16.html#associatedconstant.FRAC_2_SQRT_PI)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":55376,"byte_end":55525,"line_start":190,"line_end":193,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":169},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":55782,"byte_end":55791,"line_start":200,"line_end":200,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::binary16::consts::FRAC_PI_2","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) π/2\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) π/2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":55587,"byte_end":55623,"line_start":195,"line_end":195,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_PI_2`](../struct.f16.html#associatedconstant.FRAC_PI_2)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":55628,"byte_end":55767,"line_start":196,"line_end":199,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":170},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56014,"byte_end":56023,"line_start":206,"line_end":206,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::binary16::consts::FRAC_PI_3","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) π/3\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) π/3","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":55819,"byte_end":55855,"line_start":201,"line_end":201,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_PI_3`](../struct.f16.html#associatedconstant.FRAC_PI_3)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":55860,"byte_end":55999,"line_start":202,"line_end":205,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":171},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56246,"byte_end":56255,"line_start":212,"line_end":212,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::binary16::consts::FRAC_PI_4","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) π/4\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) π/4","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56051,"byte_end":56087,"line_start":207,"line_end":207,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_PI_4`](../struct.f16.html#associatedconstant.FRAC_PI_4)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56092,"byte_end":56231,"line_start":208,"line_end":211,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":172},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56478,"byte_end":56487,"line_start":218,"line_end":218,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::binary16::consts::FRAC_PI_6","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) π/6\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) π/6","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56283,"byte_end":56319,"line_start":213,"line_end":213,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_PI_6`](../struct.f16.html#associatedconstant.FRAC_PI_6)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56324,"byte_end":56463,"line_start":214,"line_end":217,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":173},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56710,"byte_end":56719,"line_start":224,"line_end":224,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::binary16::consts::FRAC_PI_8","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) π/8\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) π/8","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56515,"byte_end":56551,"line_start":219,"line_end":219,"column_start":5,"column_end":40}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::FRAC_PI_8`](../struct.f16.html#associatedconstant.FRAC_PI_8)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56556,"byte_end":56695,"line_start":220,"line_end":223,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":174},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56941,"byte_end":56946,"line_start":230,"line_end":230,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::binary16::consts::LN_10","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 𝗅𝗇 10\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 𝗅𝗇 10","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56747,"byte_end":56790,"line_start":225,"line_end":225,"column_start":5,"column_end":42}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::LN_10`](../struct.f16.html#associatedconstant.LN_10)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56795,"byte_end":56926,"line_start":226,"line_end":229,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":175},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57161,"byte_end":57165,"line_start":236,"line_end":236,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::binary16::consts::LN_2","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 𝗅𝗇 2\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 𝗅𝗇 2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":56970,"byte_end":57012,"line_start":231,"line_end":231,"column_start":5,"column_end":41}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::LN_2`](../struct.f16.html#associatedconstant.LN_2)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57017,"byte_end":57146,"line_start":232,"line_end":235,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":176},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57396,"byte_end":57403,"line_start":242,"line_end":242,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::binary16::consts::LOG10_E","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 𝗅𝗈𝗀₁₀ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 𝗅𝗈𝗀₁₀ℯ","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57188,"byte_end":57241,"line_start":237,"line_end":237,"column_start":5,"column_end":43}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::LOG10_E`](../struct.f16.html#associatedconstant.LOG10_E)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57246,"byte_end":57381,"line_start":238,"line_end":241,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":177},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57632,"byte_end":57638,"line_start":248,"line_end":248,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::binary16::consts::LOG2_E","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) 𝗅𝗈𝗀₂ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) 𝗅𝗈𝗀₂ℯ","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57429,"byte_end":57479,"line_start":243,"line_end":243,"column_start":5,"column_end":42}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::LOG2_E`](../struct.f16.html#associatedconstant.LOG2_E)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57484,"byte_end":57617,"line_start":244,"line_end":247,"column_start":5,"column_end":7}}]},{"kind":"Const","id":{"krate":0,"index":178},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57852,"byte_end":57858,"line_start":254,"line_end":254,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::binary16::consts::SQRT_2","value":"f16","parent":null,"children":[],"decl_id":null,"docs":" [`f16`](../struct.f16.html) √2\n","sig":null,"attributes":[{"value":"/ [`f16`](../struct.f16.html) √2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57663,"byte_end":57699,"line_start":249,"line_end":249,"column_start":5,"column_end":39}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"moved to [`f16::SQRT_2`](../struct.f16.html#associatedconstant.SQRT_2)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57704,"byte_end":57837,"line_start":250,"line_end":253,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57992,"byte_end":58001,"line_start":260,"line_end":260,"column_start":18,"column_end":27},"name":"from_bits","qualname":"<f16>::from_bits","value":"pub const fn from_bits(u16) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from the raw bits.\n","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from the raw bits.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57897,"byte_end":57960,"line_start":258,"line_end":258,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57965,"byte_end":57974,"line_start":259,"line_end":259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58566,"byte_end":58574,"line_start":272,"line_end":272,"column_start":12,"column_end":20},"name":"from_f32","qualname":"<f16>::from_f32","value":"pub fn from_f32(f32) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 32-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 32-bit floating point value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58051,"byte_end":58131,"line_start":264,"line_end":264,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58136,"byte_end":58139,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ If the 32-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58144,"byte_end":58232,"line_start":266,"line_end":266,"column_start":5,"column_end":90}},{"value":"/ preserved. 32-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58237,"byte_end":58331,"line_start":267,"line_end":267,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58336,"byte_end":58430,"line_start":268,"line_end":268,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58435,"byte_end":58525,"line_start":269,"line_end":269,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58530,"byte_end":58540,"line_start":270,"line_end":270,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58545,"byte_end":58554,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59162,"byte_end":59170,"line_start":284,"line_end":284,"column_start":12,"column_end":20},"name":"from_f64","qualname":"<f16>::from_f64","value":"pub fn from_f64(f64) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Constructs a 16-bit floating point value from a 64-bit floating point value.","sig":null,"attributes":[{"value":"/ Constructs a 16-bit floating point value from a 64-bit floating point value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58647,"byte_end":58727,"line_start":276,"line_end":276,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58732,"byte_end":58735,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ If the 64-bit value is to large to fit in 16-bits, ±∞ will result. NaN values are","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58740,"byte_end":58828,"line_start":278,"line_end":278,"column_start":5,"column_end":90}},{"value":"/ preserved. 64-bit subnormal values are too tiny to be represented in 16-bits and result in","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58833,"byte_end":58927,"line_start":279,"line_end":279,"column_start":5,"column_end":99}},{"value":"/ ±0. Exponents that underflow the minimum 16-bit exponent will result in 16-bit subnormals","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":58932,"byte_end":59026,"line_start":280,"line_end":280,"column_start":5,"column_end":98}},{"value":"/ or ±0. All other values are truncated and rounded to the nearest representable 16-bit","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59031,"byte_end":59121,"line_start":281,"line_end":281,"column_start":5,"column_end":94}},{"value":"/ value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59126,"byte_end":59136,"line_start":282,"line_end":282,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59141,"byte_end":59150,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59354,"byte_end":59361,"line_start":290,"line_end":290,"column_start":18,"column_end":25},"name":"to_bits","qualname":"<f16>::to_bits","value":"pub const fn to_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`](struct.f16.html) into the underlying bit representation.\n","sig":null,"attributes":[{"value":"/ Converts a [`f16`](struct.f16.html) into the underlying bit representation.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59243,"byte_end":59322,"line_start":288,"line_end":288,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59327,"byte_end":59336,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59746,"byte_end":59757,"line_start":305,"line_end":305,"column_start":12,"column_end":23},"name":"to_le_bytes","qualname":"<f16>::to_le_bytes","value":"pub fn to_le_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the memory representation of the underlying bit representation as a byte array in\n little-endian byte order.","sig":null,"attributes":[{"value":"/ Return the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59403,"byte_end":59495,"line_start":294,"line_end":294,"column_start":5,"column_end":97}},{"value":"/ little-endian byte order.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59500,"byte_end":59529,"line_start":295,"line_end":295,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59534,"byte_end":59537,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59542,"byte_end":59556,"line_start":297,"line_end":297,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59561,"byte_end":59564,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59569,"byte_end":59580,"line_start":299,"line_end":299,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59585,"byte_end":59612,"line_start":300,"line_end":300,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_le_bytes();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59617,"byte_end":59667,"line_start":301,"line_end":301,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, [0x40, 0x4A]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59672,"byte_end":59708,"line_start":302,"line_end":302,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59713,"byte_end":59720,"line_start":303,"line_end":303,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59725,"byte_end":59734,"line_start":304,"line_end":304,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60167,"byte_end":60178,"line_start":320,"line_end":320,"column_start":12,"column_end":23},"name":"to_be_bytes","qualname":"<f16>::to_be_bytes","value":"pub fn to_be_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the memory representation of the underlying bit representation as a byte array in\n big-endian (network) byte order.","sig":null,"attributes":[{"value":"/ Return the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59817,"byte_end":59909,"line_start":309,"line_end":309,"column_start":5,"column_end":97}},{"value":"/ big-endian (network) byte order.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59914,"byte_end":59950,"line_start":310,"line_end":310,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59955,"byte_end":59958,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59963,"byte_end":59977,"line_start":312,"line_end":312,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59982,"byte_end":59985,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":59990,"byte_end":60001,"line_start":314,"line_end":314,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60006,"byte_end":60033,"line_start":315,"line_end":315,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_be_bytes();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60038,"byte_end":60088,"line_start":316,"line_end":316,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, [0x4A, 0x40]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60093,"byte_end":60129,"line_start":317,"line_end":317,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60134,"byte_end":60141,"line_start":318,"line_end":318,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60146,"byte_end":60155,"line_start":319,"line_end":319,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60829,"byte_end":60840,"line_start":342,"line_end":342,"column_start":12,"column_end":23},"name":"to_ne_bytes","qualname":"<f16>::to_ne_bytes","value":"pub fn to_ne_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the memory representation of the underlying bit representation as a byte array in\n native byte order.","sig":null,"attributes":[{"value":"/ Return the memory representation of the underlying bit representation as a byte array in","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60238,"byte_end":60330,"line_start":324,"line_end":324,"column_start":5,"column_end":97}},{"value":"/ native byte order.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60335,"byte_end":60357,"line_start":325,"line_end":325,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60362,"byte_end":60365,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code should use `to_be_bytes`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60370,"byte_end":60464,"line_start":327,"line_end":327,"column_start":5,"column_end":99}},{"value":"/ or `to_le_bytes`, as appropriate, instead.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60469,"byte_end":60515,"line_start":328,"line_end":328,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60520,"byte_end":60523,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60528,"byte_end":60542,"line_start":330,"line_end":330,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60547,"byte_end":60550,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60555,"byte_end":60566,"line_start":332,"line_end":332,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60571,"byte_end":60598,"line_start":333,"line_end":333,"column_start":5,"column_end":32}},{"value":"/ let bytes = f16::from_f32(12.5).to_ne_bytes();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60603,"byte_end":60653,"line_start":334,"line_end":334,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(bytes, if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60658,"byte_end":60712,"line_start":335,"line_end":335,"column_start":5,"column_end":59}},{"value":"/     [0x4A, 0x40]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60717,"byte_end":60737,"line_start":336,"line_end":336,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60742,"byte_end":60754,"line_start":337,"line_end":337,"column_start":5,"column_end":17}},{"value":"/     [0x40, 0x4A]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60759,"byte_end":60779,"line_start":338,"line_end":338,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60784,"byte_end":60791,"line_start":339,"line_end":339,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60796,"byte_end":60803,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60808,"byte_end":60817,"line_start":341,"line_end":341,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61214,"byte_end":61227,"line_start":356,"line_end":356,"column_start":12,"column_end":25},"name":"from_le_bytes","qualname":"<f16>::from_le_bytes","value":"pub fn from_le_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Create a floating point value from its representation as a byte array in little endian.","sig":null,"attributes":[{"value":"/ Create a floating point value from its representation as a byte array in little endian.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60900,"byte_end":60991,"line_start":346,"line_end":346,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":60996,"byte_end":60999,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61004,"byte_end":61018,"line_start":348,"line_end":348,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61023,"byte_end":61026,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61031,"byte_end":61042,"line_start":350,"line_end":350,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61047,"byte_end":61074,"line_start":351,"line_end":351,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_le_bytes([0x40, 0x4A]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61079,"byte_end":61128,"line_start":352,"line_end":352,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61133,"byte_end":61176,"line_start":353,"line_end":353,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61181,"byte_end":61188,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61193,"byte_end":61202,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61625,"byte_end":61638,"line_start":370,"line_end":370,"column_start":12,"column_end":25},"name":"from_be_bytes","qualname":"<f16>::from_be_bytes","value":"pub fn from_be_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Create a floating point value from its representation as a byte array in big endian.","sig":null,"attributes":[{"value":"/ Create a floating point value from its representation as a byte array in big endian.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61314,"byte_end":61402,"line_start":360,"line_end":360,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61407,"byte_end":61410,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61415,"byte_end":61429,"line_start":362,"line_end":362,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61434,"byte_end":61437,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61442,"byte_end":61453,"line_start":364,"line_end":364,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61458,"byte_end":61485,"line_start":365,"line_end":365,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_be_bytes([0x4A, 0x40]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61490,"byte_end":61539,"line_start":366,"line_end":366,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61544,"byte_end":61587,"line_start":367,"line_end":367,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61592,"byte_end":61599,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61604,"byte_end":61613,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62306,"byte_end":62319,"line_start":391,"line_end":391,"column_start":12,"column_end":25},"name":"from_ne_bytes","qualname":"<f16>::from_ne_bytes","value":"pub fn from_ne_bytes([u8; ]) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Create a floating point value from its representation as a byte array in native endian.","sig":null,"attributes":[{"value":"/ Create a floating point value from its representation as a byte array in native endian.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61725,"byte_end":61816,"line_start":374,"line_end":374,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61821,"byte_end":61824,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ As the target platform's native endianness is used, portable code likely wants to use","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61829,"byte_end":61918,"line_start":376,"line_end":376,"column_start":5,"column_end":94}},{"value":"/ `from_be_bytes` or `from_le_bytes`, as appropriate instead.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61923,"byte_end":61986,"line_start":377,"line_end":377,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61991,"byte_end":61994,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":61999,"byte_end":62013,"line_start":379,"line_end":379,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62018,"byte_end":62021,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62026,"byte_end":62037,"line_start":381,"line_end":381,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62042,"byte_end":62069,"line_start":382,"line_end":382,"column_start":5,"column_end":32}},{"value":"/ let value = f16::from_ne_bytes(if cfg!(target_endian = \"big\") {","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62074,"byte_end":62141,"line_start":383,"line_end":383,"column_start":5,"column_end":72}},{"value":"/     [0x4A, 0x40]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62146,"byte_end":62166,"line_start":384,"line_end":384,"column_start":5,"column_end":25}},{"value":"/ } else {","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62171,"byte_end":62183,"line_start":385,"line_end":385,"column_start":5,"column_end":17}},{"value":"/     [0x40, 0x4A]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62188,"byte_end":62208,"line_start":386,"line_end":386,"column_start":5,"column_end":25}},{"value":"/ });","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62213,"byte_end":62220,"line_start":387,"line_end":387,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, f16::from_f32(12.5));","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62225,"byte_end":62268,"line_start":388,"line_end":388,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62273,"byte_end":62280,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62285,"byte_end":62294,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62596,"byte_end":62603,"line_start":398,"line_end":398,"column_start":12,"column_end":19},"name":"as_bits","qualname":"<f16>::as_bits","value":"pub fn as_bits(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`](struct.f16.html) into the underlying bit representation.\n","sig":null,"attributes":[{"value":"/ Converts a [`f16`](struct.f16.html) into the underlying bit representation.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62406,"byte_end":62485,"line_start":395,"line_end":395,"column_start":5,"column_end":84}},{"value":"deprecated(since = \"1.2.0\", note =\n             \"renamed to [`to_bits`](#method.to_bits)\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62490,"byte_end":62570,"line_start":396,"line_end":396,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62575,"byte_end":62584,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62885,"byte_end":62891,"line_start":407,"line_end":407,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<f16>::to_f32","value":"pub fn to_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`](struct.f16.html) value into a `f32` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`](struct.f16.html) value into a `f32` value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62653,"byte_end":62718,"line_start":402,"line_end":402,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62723,"byte_end":62726,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62731,"byte_end":62825,"line_start":404,"line_end":404,"column_start":5,"column_end":99}},{"value":"/ in 32-bit floating point.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62830,"byte_end":62859,"line_start":405,"line_end":405,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62864,"byte_end":62873,"line_start":406,"line_end":406,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63186,"byte_end":63192,"line_start":416,"line_end":416,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<f16>::to_f64","value":"pub fn to_f64(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`f16`](struct.f16.html) value into a `f64` value.","sig":null,"attributes":[{"value":"/ Converts a [`f16`](struct.f16.html) value into a `f64` value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":62954,"byte_end":63019,"line_start":411,"line_end":411,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63024,"byte_end":63027,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ This conversion is lossless as all 16-bit floating point values can be represented exactly","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63032,"byte_end":63126,"line_start":413,"line_end":413,"column_start":5,"column_end":99}},{"value":"/ in 64-bit floating point.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63131,"byte_end":63160,"line_start":414,"line_end":414,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63165,"byte_end":63174,"line_start":415,"line_end":415,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63591,"byte_end":63597,"line_start":434,"line_end":434,"column_start":18,"column_end":24},"name":"is_nan","qualname":"<f16>::is_nan","value":"pub const fn is_nan(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is `NaN` and `false` otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is `NaN` and `false` otherwise.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63255,"byte_end":63319,"line_start":420,"line_end":420,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63324,"byte_end":63327,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63332,"byte_end":63346,"line_start":422,"line_end":422,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63351,"byte_end":63354,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63359,"byte_end":63370,"line_start":424,"line_end":424,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63375,"byte_end":63402,"line_start":425,"line_end":425,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63407,"byte_end":63410,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63415,"byte_end":63438,"line_start":427,"line_end":427,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63443,"byte_end":63478,"line_start":428,"line_end":428,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63483,"byte_end":63486,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ assert!(nan.is_nan());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63491,"byte_end":63517,"line_start":430,"line_end":430,"column_start":5,"column_end":31}},{"value":"/ assert!(!f.is_nan());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63522,"byte_end":63547,"line_start":431,"line_end":431,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63552,"byte_end":63559,"line_start":432,"line_end":432,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63564,"byte_end":63573,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64176,"byte_end":64187,"line_start":458,"line_end":458,"column_start":18,"column_end":29},"name":"is_infinite","qualname":"<f16>::is_infinite","value":"pub const fn is_infinite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this value is ±∞ and `false`\n otherwise.","sig":null,"attributes":[{"value":"/ Returns `true` if this value is ±∞ and `false`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63664,"byte_end":63717,"line_start":438,"line_end":438,"column_start":5,"column_end":55}},{"value":"/ otherwise.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63722,"byte_end":63736,"line_start":439,"line_end":439,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63741,"byte_end":63744,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63749,"byte_end":63763,"line_start":441,"line_end":441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63768,"byte_end":63771,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63776,"byte_end":63787,"line_start":443,"line_end":443,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63792,"byte_end":63819,"line_start":444,"line_end":444,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63824,"byte_end":63827,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63832,"byte_end":63866,"line_start":446,"line_end":446,"column_start":5,"column_end":39}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63871,"byte_end":63899,"line_start":447,"line_end":447,"column_start":5,"column_end":33}},{"value":"/ let neg_inf = f16::NEG_INFINITY;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63904,"byte_end":63940,"line_start":448,"line_end":448,"column_start":5,"column_end":41}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63945,"byte_end":63968,"line_start":449,"line_end":449,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63973,"byte_end":63976,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_infinite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":63981,"byte_end":64011,"line_start":451,"line_end":451,"column_start":5,"column_end":35}},{"value":"/ assert!(!nan.is_infinite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64016,"byte_end":64048,"line_start":452,"line_end":452,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64053,"byte_end":64056,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ assert!(inf.is_infinite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64061,"byte_end":64092,"line_start":454,"line_end":454,"column_start":5,"column_end":36}},{"value":"/ assert!(neg_inf.is_infinite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64097,"byte_end":64132,"line_start":455,"line_end":455,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64137,"byte_end":64144,"line_start":456,"line_end":456,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64149,"byte_end":64158,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64752,"byte_end":64761,"line_start":481,"line_end":481,"column_start":18,"column_end":27},"name":"is_finite","qualname":"<f16>::is_finite","value":"pub const fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor `NaN`.","sig":null,"attributes":[{"value":"/ Returns `true` if this number is neither infinite nor `NaN`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64255,"byte_end":64319,"line_start":462,"line_end":462,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64324,"byte_end":64327,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64332,"byte_end":64346,"line_start":464,"line_end":464,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64351,"byte_end":64354,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64359,"byte_end":64370,"line_start":466,"line_end":466,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64375,"byte_end":64402,"line_start":467,"line_end":467,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64407,"byte_end":64410,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64415,"byte_end":64449,"line_start":469,"line_end":469,"column_start":5,"column_end":39}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64454,"byte_end":64482,"line_start":470,"line_end":470,"column_start":5,"column_end":33}},{"value":"/ let neg_inf = f16::NEG_INFINITY;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64487,"byte_end":64523,"line_start":471,"line_end":471,"column_start":5,"column_end":41}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64528,"byte_end":64551,"line_start":472,"line_end":472,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64556,"byte_end":64559,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_finite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64564,"byte_end":64591,"line_start":474,"line_end":474,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64596,"byte_end":64599,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ assert!(!nan.is_finite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64604,"byte_end":64634,"line_start":476,"line_end":476,"column_start":5,"column_end":35}},{"value":"/ assert!(!inf.is_finite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64639,"byte_end":64669,"line_start":477,"line_end":477,"column_start":5,"column_end":35}},{"value":"/ assert!(!neg_inf.is_finite());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64674,"byte_end":64708,"line_start":478,"line_end":478,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64713,"byte_end":64720,"line_start":479,"line_end":479,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64725,"byte_end":64734,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65509,"byte_end":65518,"line_start":507,"line_end":507,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<f16>::is_normal","value":"pub fn is_normal(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal, or `NaN`.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal, or `NaN`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64829,"byte_end":64909,"line_start":485,"line_end":485,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64914,"byte_end":64917,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64922,"byte_end":64936,"line_start":487,"line_end":487,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64941,"byte_end":64944,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64949,"byte_end":64960,"line_start":489,"line_end":489,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64965,"byte_end":64992,"line_start":490,"line_end":490,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":64997,"byte_end":65000,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ let min = f16::MIN_POSITIVE;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65005,"byte_end":65037,"line_start":492,"line_end":492,"column_start":5,"column_end":37}},{"value":"/ let max = f16::MAX;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65042,"byte_end":65065,"line_start":493,"line_end":493,"column_start":5,"column_end":28}},{"value":"/ let lower_than_min = f16::from_f32(1.0e-10_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65070,"byte_end":65122,"line_start":494,"line_end":494,"column_start":5,"column_end":57}},{"value":"/ let zero = f16::from_f32(0.0_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65127,"byte_end":65165,"line_start":495,"line_end":495,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65170,"byte_end":65173,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ assert!(min.is_normal());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65178,"byte_end":65207,"line_start":497,"line_end":497,"column_start":5,"column_end":34}},{"value":"/ assert!(max.is_normal());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65212,"byte_end":65241,"line_start":498,"line_end":498,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65246,"byte_end":65249,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ assert!(!zero.is_normal());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65254,"byte_end":65285,"line_start":500,"line_end":500,"column_start":5,"column_end":36}},{"value":"/ assert!(!f16::NAN.is_normal());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65290,"byte_end":65325,"line_start":501,"line_end":501,"column_start":5,"column_end":40}},{"value":"/ assert!(!f16::INFINITY.is_normal());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65330,"byte_end":65370,"line_start":502,"line_end":502,"column_start":5,"column_end":45}},{"value":"/ // Values between `0` and `min` are Subnormal.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65375,"byte_end":65425,"line_start":503,"line_end":503,"column_start":5,"column_end":55}},{"value":"/ assert!(!lower_than_min.is_normal());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65430,"byte_end":65471,"line_start":504,"line_end":504,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65476,"byte_end":65483,"line_start":505,"line_end":505,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65488,"byte_end":65497,"line_start":506,"line_end":506,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66152,"byte_end":66160,"line_start":529,"line_end":529,"column_start":12,"column_end":20},"name":"classify","qualname":"<f16>::classify","value":"pub fn classify(Self) -> FpCategory","parent":null,"children":[],"decl_id":null,"docs":" Returns the floating point category of the number.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65621,"byte_end":65675,"line_start":512,"line_end":512,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65680,"byte_end":65683,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ If only one property is going to be tested, it is generally faster to use the specific","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65688,"byte_end":65778,"line_start":514,"line_end":514,"column_start":5,"column_end":95}},{"value":"/ predicate instead.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65783,"byte_end":65805,"line_start":515,"line_end":515,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65810,"byte_end":65813,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65818,"byte_end":65832,"line_start":517,"line_end":517,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65837,"byte_end":65840,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65845,"byte_end":65856,"line_start":519,"line_end":519,"column_start":5,"column_end":16}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65861,"byte_end":65890,"line_start":520,"line_end":520,"column_start":5,"column_end":34}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65895,"byte_end":65922,"line_start":521,"line_end":521,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65927,"byte_end":65930,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ let num = f16::from_f32(12.4_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65935,"byte_end":65973,"line_start":523,"line_end":523,"column_start":5,"column_end":43}},{"value":"/ let inf = f16::INFINITY;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":65978,"byte_end":66006,"line_start":524,"line_end":524,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66011,"byte_end":66014,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(num.classify(), FpCategory::Normal);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66019,"byte_end":66070,"line_start":526,"line_end":526,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(inf.classify(), FpCategory::Infinite);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66075,"byte_end":66128,"line_start":527,"line_end":527,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66133,"byte_end":66140,"line_start":528,"line_end":528,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67101,"byte_end":67107,"line_start":559,"line_end":559,"column_start":12,"column_end":18},"name":"signum","qualname":"<f16>::signum","value":"pub fn signum(Self) -> f16","parent":null,"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66528,"byte_end":66584,"line_start":541,"line_end":541,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66589,"byte_end":66592,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ * `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66597,"byte_end":66656,"line_start":543,"line_end":543,"column_start":5,"column_end":64}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66661,"byte_end":66725,"line_start":544,"line_end":544,"column_start":5,"column_end":69}},{"value":"/ * `NAN` if the number is `NAN`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66730,"byte_end":66764,"line_start":545,"line_end":545,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66769,"byte_end":66772,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66777,"byte_end":66791,"line_start":547,"line_end":547,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66796,"byte_end":66799,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66804,"byte_end":66815,"line_start":549,"line_end":549,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66820,"byte_end":66847,"line_start":550,"line_end":550,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66852,"byte_end":66855,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ let f = f16::from_f32(3.5_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66860,"byte_end":66895,"line_start":552,"line_end":552,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66900,"byte_end":66903,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(f.signum(), f16::from_f32(1.0));","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66908,"byte_end":66955,"line_start":554,"line_end":554,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(f16::NEG_INFINITY.signum(), f16::from_f32(-1.0));","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":66960,"byte_end":67024,"line_start":555,"line_end":555,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67029,"byte_end":67032,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ assert!(f16::NAN.signum().is_nan());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67037,"byte_end":67077,"line_start":557,"line_end":557,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67082,"byte_end":67089,"line_start":558,"line_end":558,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67891,"byte_end":67907,"line_start":587,"line_end":587,"column_start":18,"column_end":34},"name":"is_sign_positive","qualname":"<f16>::is_sign_positive","value":"pub const fn is_sign_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaNs` with a\n positive sign bit and +∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a positive sign, including `+0.0`, `NaNs` with a","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67312,"byte_end":67405,"line_start":569,"line_end":569,"column_start":5,"column_end":98}},{"value":"/ positive sign bit and +∞.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67410,"byte_end":67441,"line_start":570,"line_end":570,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67446,"byte_end":67449,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67454,"byte_end":67468,"line_start":572,"line_end":572,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67473,"byte_end":67476,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67481,"byte_end":67492,"line_start":574,"line_end":574,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67497,"byte_end":67524,"line_start":575,"line_end":575,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67529,"byte_end":67532,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67537,"byte_end":67560,"line_start":577,"line_end":577,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67565,"byte_end":67600,"line_start":578,"line_end":578,"column_start":5,"column_end":40}},{"value":"/ let g = f16::from_f32(-7.0_f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67605,"byte_end":67641,"line_start":579,"line_end":579,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67646,"byte_end":67649,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ assert!(f.is_sign_positive());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67654,"byte_end":67688,"line_start":581,"line_end":581,"column_start":5,"column_end":39}},{"value":"/ assert!(!g.is_sign_positive());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67693,"byte_end":67728,"line_start":582,"line_end":582,"column_start":5,"column_end":40}},{"value":"/ // `NaN` can be either positive or negative","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67733,"byte_end":67780,"line_start":583,"line_end":583,"column_start":5,"column_end":52}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67785,"byte_end":67847,"line_start":584,"line_end":584,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67852,"byte_end":67859,"line_start":585,"line_end":585,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67864,"byte_end":67873,"line_start":586,"line_end":586,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68546,"byte_end":68562,"line_start":609,"line_end":609,"column_start":18,"column_end":34},"name":"is_sign_negative","qualname":"<f16>::is_sign_negative","value":"pub const fn is_sign_negative(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaNs` with a\n negative sign bit and −∞.","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self` has a negative sign, including `-0.0`, `NaNs` with a","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":67967,"byte_end":68060,"line_start":591,"line_end":591,"column_start":5,"column_end":98}},{"value":"/ negative sign bit and −∞.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68065,"byte_end":68098,"line_start":592,"line_end":592,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68103,"byte_end":68106,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68111,"byte_end":68125,"line_start":594,"line_end":594,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68130,"byte_end":68133,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68138,"byte_end":68149,"line_start":596,"line_end":596,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68154,"byte_end":68181,"line_start":597,"line_end":597,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68186,"byte_end":68189,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ let nan = f16::NAN;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68194,"byte_end":68217,"line_start":599,"line_end":599,"column_start":5,"column_end":28}},{"value":"/ let f = f16::from_f32(7.0f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68222,"byte_end":68256,"line_start":600,"line_end":600,"column_start":5,"column_end":39}},{"value":"/ let g = f16::from_f32(-7.0f32);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68261,"byte_end":68296,"line_start":601,"line_end":601,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68301,"byte_end":68304,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ assert!(!f.is_sign_negative());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68309,"byte_end":68344,"line_start":603,"line_end":603,"column_start":5,"column_end":40}},{"value":"/ assert!(g.is_sign_negative());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68349,"byte_end":68383,"line_start":604,"line_end":604,"column_start":5,"column_end":39}},{"value":"/ // `NaN` can be either positive or negative","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68388,"byte_end":68435,"line_start":605,"line_end":605,"column_start":5,"column_end":52}},{"value":"/ assert!(nan.is_sign_positive() != nan.is_sign_negative());","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68440,"byte_end":68502,"line_start":606,"line_end":606,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68507,"byte_end":68514,"line_start":607,"line_end":607,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68519,"byte_end":68528,"line_start":608,"line_end":608,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":207},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68718,"byte_end":68724,"line_start":614,"line_end":614,"column_start":15,"column_end":21},"name":"DIGITS","qualname":"::binary16::f16::DIGITS","value":"u32","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Approximate number of [`f16`](struct.f16.html) significant digits in base 10.\n","sig":null,"attributes":[{"value":"/ Approximate number of [`f16`](struct.f16.html) significant digits in base 10.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68622,"byte_end":68703,"line_start":613,"line_end":613,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":208},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68956,"byte_end":68963,"line_start":619,"line_end":619,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::binary16::f16::EPSILON","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html)\n [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value.","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68739,"byte_end":68767,"line_start":615,"line_end":615,"column_start":5,"column_end":33}},{"value":"/ [machine epsilon](https://en.wikipedia.org/wiki/Machine_epsilon) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68772,"byte_end":68847,"line_start":616,"line_end":616,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68852,"byte_end":68855,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ This is the difference between 1.0 and the next largest representable number.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68860,"byte_end":68941,"line_start":618,"line_end":618,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":209},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69060,"byte_end":69068,"line_start":621,"line_end":621,"column_start":15,"column_end":23},"name":"INFINITY","qualname":"::binary16::f16::INFINITY","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) positive Infinity (+∞).\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) positive Infinity (+∞).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":68991,"byte_end":69045,"line_start":620,"line_end":620,"column_start":5,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":210},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69179,"byte_end":69194,"line_start":623,"line_end":623,"column_start":15,"column_end":30},"name":"MANTISSA_DIGITS","qualname":"::binary16::f16::MANTISSA_DIGITS","value":"u32","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Number of [`f16`](struct.f16.html) significant digits in base 2.\n","sig":null,"attributes":[{"value":"/ Number of [`f16`](struct.f16.html) significant digits in base 2.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69096,"byte_end":69164,"line_start":622,"line_end":622,"column_start":5,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":211},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69275,"byte_end":69278,"line_start":625,"line_end":625,"column_start":15,"column_end":18},"name":"MAX","qualname":"::binary16::f16::MAX","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Largest finite [`f16`](struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Largest finite [`f16`](struct.f16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69210,"byte_end":69260,"line_start":624,"line_end":624,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":212},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69385,"byte_end":69395,"line_start":627,"line_end":627,"column_start":15,"column_end":25},"name":"MAX_10_EXP","qualname":"::binary16::f16::MAX_10_EXP","value":"i32","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Maximum possible [`f16`](struct.f16.html) power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`](struct.f16.html) power of 10 exponent.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69303,"byte_end":69370,"line_start":626,"line_end":626,"column_start":5,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":213},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69491,"byte_end":69498,"line_start":629,"line_end":629,"column_start":15,"column_end":22},"name":"MAX_EXP","qualname":"::binary16::f16::MAX_EXP","value":"i32","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Maximum possible [`f16`](struct.f16.html) power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible [`f16`](struct.f16.html) power of 2 exponent.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69410,"byte_end":69476,"line_start":628,"line_end":628,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":214},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69580,"byte_end":69583,"line_start":631,"line_end":631,"column_start":15,"column_end":18},"name":"MIN","qualname":"::binary16::f16::MIN","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Smallest finite [`f16`](struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Smallest finite [`f16`](struct.f16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69514,"byte_end":69565,"line_start":630,"line_end":630,"column_start":5,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":215},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69697,"byte_end":69707,"line_start":633,"line_end":633,"column_start":15,"column_end":25},"name":"MIN_10_EXP","qualname":"::binary16::f16::MIN_10_EXP","value":"i32","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Minimum possible normal [`f16`](struct.f16.html) power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Minimum possible normal [`f16`](struct.f16.html) power of 10 exponent.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69608,"byte_end":69682,"line_start":632,"line_end":632,"column_start":5,"column_end":79}}]},{"kind":"Const","id":{"krate":0,"index":216},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69832,"byte_end":69839,"line_start":635,"line_end":635,"column_start":15,"column_end":22},"name":"MIN_EXP","qualname":"::binary16::f16::MIN_EXP","value":"i32","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal [`f16`](struct.f16.html) power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal [`f16`](struct.f16.html) power of 2 exponent.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69723,"byte_end":69817,"line_start":634,"line_end":634,"column_start":5,"column_end":99}}]},{"kind":"Const","id":{"krate":0,"index":217},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69931,"byte_end":69943,"line_start":637,"line_end":637,"column_start":15,"column_end":27},"name":"MIN_POSITIVE","qualname":"::binary16::f16::MIN_POSITIVE","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Smallest positive normal [`f16`](struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Smallest positive normal [`f16`](struct.f16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69856,"byte_end":69916,"line_start":636,"line_end":636,"column_start":5,"column_end":65}}]},{"kind":"Const","id":{"krate":0,"index":218},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70034,"byte_end":70037,"line_start":639,"line_end":639,"column_start":15,"column_end":18},"name":"NAN","qualname":"::binary16::f16::NAN","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) Not a Number (NaN).\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) Not a Number (NaN).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":69971,"byte_end":70019,"line_start":638,"line_end":638,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":219},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70134,"byte_end":70146,"line_start":641,"line_end":641,"column_start":15,"column_end":27},"name":"NEG_INFINITY","qualname":"::binary16::f16::NEG_INFINITY","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) negative infinity (-∞).\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) negative infinity (-∞).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70065,"byte_end":70119,"line_start":640,"line_end":640,"column_start":5,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":220},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70270,"byte_end":70275,"line_start":643,"line_end":643,"column_start":15,"column_end":20},"name":"RADIX","qualname":"::binary16::f16::RADIX","value":"u32","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of [`f16`](struct.f16.html).\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of [`f16`](struct.f16.html).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70174,"byte_end":70255,"line_start":642,"line_end":642,"column_start":5,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":221},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70368,"byte_end":70390,"line_start":646,"line_end":646,"column_start":15,"column_end":37},"name":"MIN_POSITIVE_SUBNORMAL","qualname":"::binary16::f16::MIN_POSITIVE_SUBNORMAL","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Minimum positive subnormal [`f16`](struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Minimum positive subnormal [`f16`](struct.f16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70291,"byte_end":70353,"line_start":645,"line_end":645,"column_start":5,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":222},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70486,"byte_end":70499,"line_start":648,"line_end":648,"column_start":15,"column_end":28},"name":"MAX_SUBNORMAL","qualname":"::binary16::f16::MAX_SUBNORMAL","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" Maximum subnormal [`f16`](struct.f16.html) value.\n","sig":null,"attributes":[{"value":"/ Maximum subnormal [`f16`](struct.f16.html) value.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70418,"byte_end":70471,"line_start":647,"line_end":647,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":223},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70573,"byte_end":70576,"line_start":651,"line_end":651,"column_start":15,"column_end":18},"name":"ONE","qualname":"::binary16::f16::ONE","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 1\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 1","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70528,"byte_end":70558,"line_start":650,"line_end":650,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":224},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70649,"byte_end":70653,"line_start":653,"line_end":653,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::binary16::f16::ZERO","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 0\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 0","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70604,"byte_end":70634,"line_start":652,"line_end":652,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":225},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70727,"byte_end":70735,"line_start":655,"line_end":655,"column_start":15,"column_end":23},"name":"NEG_ZERO","qualname":"::binary16::f16::NEG_ZERO","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) -0\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) -0","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70681,"byte_end":70712,"line_start":654,"line_end":654,"column_start":5,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":226},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70829,"byte_end":70830,"line_start":658,"line_end":658,"column_start":15,"column_end":16},"name":"E","qualname":"::binary16::f16::E","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) Euler's number (ℯ).\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) Euler's number (ℯ).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70764,"byte_end":70814,"line_start":657,"line_end":657,"column_start":5,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":227},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70928,"byte_end":70930,"line_start":660,"line_end":660,"column_start":15,"column_end":17},"name":"PI","qualname":"::binary16::f16::PI","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) Archimedes' constant (π).\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) Archimedes' constant (π).","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70858,"byte_end":70913,"line_start":659,"line_end":659,"column_start":5,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":228},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71006,"byte_end":71015,"line_start":662,"line_end":662,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::binary16::f16::FRAC_1_PI","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 1/π\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 1/π","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":70958,"byte_end":70991,"line_start":661,"line_end":661,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":229},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71093,"byte_end":71106,"line_start":664,"line_end":664,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::binary16::f16::FRAC_1_SQRT_2","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 1/√2\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 1/√2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71043,"byte_end":71078,"line_start":663,"line_end":663,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":230},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71182,"byte_end":71191,"line_start":666,"line_end":666,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::binary16::f16::FRAC_2_PI","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 2/π\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 2/π","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71134,"byte_end":71167,"line_start":665,"line_end":665,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":231},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71270,"byte_end":71284,"line_start":668,"line_end":668,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::binary16::f16::FRAC_2_SQRT_PI","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 2/√π\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 2/√π","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71219,"byte_end":71255,"line_start":667,"line_end":667,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":232},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71360,"byte_end":71369,"line_start":670,"line_end":670,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::binary16::f16::FRAC_PI_2","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) π/2\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) π/2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71312,"byte_end":71345,"line_start":669,"line_end":669,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":233},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71445,"byte_end":71454,"line_start":672,"line_end":672,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::binary16::f16::FRAC_PI_3","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) π/3\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) π/3","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71397,"byte_end":71430,"line_start":671,"line_end":671,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":234},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71530,"byte_end":71539,"line_start":674,"line_end":674,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::binary16::f16::FRAC_PI_4","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) π/4\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) π/4","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71482,"byte_end":71515,"line_start":673,"line_end":673,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":235},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71615,"byte_end":71624,"line_start":676,"line_end":676,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::binary16::f16::FRAC_PI_6","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) π/6\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) π/6","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71567,"byte_end":71600,"line_start":675,"line_end":675,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":236},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71700,"byte_end":71709,"line_start":678,"line_end":678,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::binary16::f16::FRAC_PI_8","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) π/8\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) π/8","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71652,"byte_end":71685,"line_start":677,"line_end":677,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":237},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71792,"byte_end":71797,"line_start":680,"line_end":680,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::binary16::f16::LN_10","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 𝗅𝗇 10\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 𝗅𝗇 10","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71737,"byte_end":71777,"line_start":679,"line_end":679,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":238},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71879,"byte_end":71883,"line_start":682,"line_end":682,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::binary16::f16::LN_2","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 𝗅𝗇 2\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 𝗅𝗇 2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71825,"byte_end":71864,"line_start":681,"line_end":681,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":239},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71976,"byte_end":71983,"line_start":684,"line_end":684,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::binary16::f16::LOG10_E","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 𝗅𝗈𝗀₁₀ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 𝗅𝗈𝗀₁₀ℯ","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":71911,"byte_end":71961,"line_start":683,"line_end":683,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":240},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72074,"byte_end":72081,"line_start":686,"line_end":686,"column_start":15,"column_end":22},"name":"LOG10_2","qualname":"::binary16::f16::LOG10_2","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 𝗅𝗈𝗀₁₀2\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 𝗅𝗈𝗀₁₀2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72011,"byte_end":72059,"line_start":685,"line_end":685,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":241},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72171,"byte_end":72177,"line_start":688,"line_end":688,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::binary16::f16::LOG2_E","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 𝗅𝗈𝗀₂ℯ\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 𝗅𝗈𝗀₂ℯ","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72109,"byte_end":72156,"line_start":687,"line_end":687,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":242},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72266,"byte_end":72273,"line_start":690,"line_end":690,"column_start":15,"column_end":22},"name":"LOG2_10","qualname":"::binary16::f16::LOG2_10","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) 𝗅𝗈𝗀₂10\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) 𝗅𝗈𝗀₂10","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72205,"byte_end":72251,"line_start":689,"line_end":689,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":243},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72349,"byte_end":72355,"line_start":692,"line_end":692,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::binary16::f16::SQRT_2","value":"f16","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" [`f16`](struct.f16.html) √2\n","sig":null,"attributes":[{"value":"/ [`f16`](struct.f16.html) √2","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72301,"byte_end":72334,"line_start":691,"line_end":691,"column_start":5,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":271},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":284},{"krate":0,"index":289},{"krate":0,"index":298},{"krate":0,"index":309},{"krate":0,"index":316},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324}],"decl_id":null,"docs":" Contains utility functions and traits to convert between slices of `u16` bits and `f16` or\n `bf16` numbers.","sig":null,"attributes":[{"value":"/ Contains utility functions and traits to convert between slices of `u16` bits and `f16` or","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":114357,"byte_end":114451,"line_start":1,"line_end":1,"column_start":1,"column_end":95}},{"value":"/ `bf16` numbers.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":114452,"byte_end":114471,"line_start":2,"line_end":2,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":114472,"byte_end":114475,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ The utility [`HalfBitsSliceExt`] sealed extension trait is implemented for `[u16]` slices,","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":114476,"byte_end":114570,"line_start":4,"line_end":4,"column_start":1,"column_end":95}},{"value":"/ while the utility [`HalfFloatSliceExt`] sealed extension trait is implemented for both `[f16]`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":114571,"byte_end":114669,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ and `[bf16]` slices. These traits provide efficient conversions and reinterpret casting of","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":114670,"byte_end":114764,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ larger buffers of floating point values, and are automatically included in the [`prelude`]","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":114765,"byte_end":114859,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ module.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":114860,"byte_end":114871,"line_start":8,"line_end":8,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":114872,"byte_end":114875,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`HalfBitsSliceExt`]: trait.HalfBitsSliceExt.html","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":114876,"byte_end":114929,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"/ [`HalfFloatSliceExt`]: trait.HalfFloatSliceExt.html","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":114930,"byte_end":114985,"line_start":11,"line_end":11,"column_start":1,"column_end":56}},{"value":"/ [`prelude`]: ../prelude/index.html","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":114986,"byte_end":115024,"line_start":12,"line_end":12,"column_start":1,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":277},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115346,"byte_end":115363,"line_start":23,"line_end":23,"column_start":11,"column_end":28},"name":"HalfFloatSliceExt","qualname":"::slice::HalfFloatSliceExt","value":"HalfFloatSliceExt: private::SealedHalfFloatSlice","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283}],"decl_id":null,"docs":" Extensions to `[f16]` and `[bf16]` slices to support conversion and reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to `[f16]` and `[bf16]` slices to support conversion and reinterpret operations.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115162,"byte_end":115257,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115258,"byte_end":115261,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115262,"byte_end":115335,"line_start":22,"line_end":22,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116032,"byte_end":116048,"line_start":39,"line_end":39,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"::slice::HalfFloatSliceExt::reinterpret_cast","value":"pub fn reinterpret_cast(&Self) -> &[u16]","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" Reinterpret a slice of [`f16`](../struct.f16.html) or [`bf16`](../struct.bf16.html)\n numbers as a slice of `u16` bits.","sig":null,"attributes":[{"value":"/ Reinterpret a slice of [`f16`](../struct.f16.html) or [`bf16`](../struct.bf16.html)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115401,"byte_end":115488,"line_start":24,"line_end":24,"column_start":5,"column_end":92}},{"value":"/ numbers as a slice of `u16` bits.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115493,"byte_end":115530,"line_start":25,"line_end":25,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115535,"byte_end":115538,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted slice has the same lifetime and memory","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115543,"byte_end":115634,"line_start":27,"line_end":27,"column_start":5,"column_end":96}},{"value":"/ location as `self`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115639,"byte_end":115662,"line_start":28,"line_end":28,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115667,"byte_end":115670,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115675,"byte_end":115689,"line_start":30,"line_end":30,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115694,"byte_end":115697,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115702,"byte_end":115713,"line_start":32,"line_end":32,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115718,"byte_end":115745,"line_start":33,"line_end":33,"column_start":5,"column_end":32}},{"value":"/ let float_buffer = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115750,"byte_end":115831,"line_start":34,"line_end":34,"column_start":5,"column_end":86}},{"value":"/ let int_buffer = float_buffer.reinterpret_cast();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115836,"byte_end":115889,"line_start":35,"line_end":35,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115894,"byte_end":115897,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(int_buffer, [float_buffer[0].to_bits(), float_buffer[1].to_bits(), float_buffer[2].to_bits()]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115902,"byte_end":116012,"line_start":37,"line_end":37,"column_start":5,"column_end":115}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116017,"byte_end":116024,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117149,"byte_end":117169,"line_start":65,"line_end":65,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"::slice::HalfFloatSliceExt::reinterpret_cast_mut","value":"pub fn reinterpret_cast_mut(&mut Self) -> &mut [u16]","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" Reinterpret a mutable slice of [`f16`](../struct.f16.html) or\n [`bf16`](../struct.bf16.html) numbers as a mutable slice of `u16` bits.","sig":null,"attributes":[{"value":"/ Reinterpret a mutable slice of [`f16`](../struct.f16.html) or","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116072,"byte_end":116137,"line_start":41,"line_end":41,"column_start":5,"column_end":70}},{"value":"/ [`bf16`](../struct.bf16.html) numbers as a mutable slice of `u16` bits.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116142,"byte_end":116217,"line_start":42,"line_end":42,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116222,"byte_end":116225,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The transmuted slice has the same lifetime as the original,","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116230,"byte_end":116324,"line_start":44,"line_end":44,"column_start":5,"column_end":99}},{"value":"/ which prevents mutating `self` as long as the returned `&mut [u16]` is borrowed.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116329,"byte_end":116413,"line_start":45,"line_end":45,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116418,"byte_end":116421,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116426,"byte_end":116440,"line_start":47,"line_end":47,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116445,"byte_end":116448,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116453,"byte_end":116464,"line_start":49,"line_end":49,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116469,"byte_end":116496,"line_start":50,"line_end":50,"column_start":5,"column_end":32}},{"value":"/ let mut float_buffer = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116501,"byte_end":116586,"line_start":51,"line_end":51,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116591,"byte_end":116594,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116599,"byte_end":116604,"line_start":53,"line_end":53,"column_start":5,"column_end":10}},{"value":"/     let int_buffer = float_buffer.reinterpret_cast_mut();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116609,"byte_end":116670,"line_start":54,"line_end":54,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116675,"byte_end":116678,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(int_buffer, [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116683,"byte_end":116803,"line_start":56,"line_end":56,"column_start":5,"column_end":125}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116808,"byte_end":116811,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/     // Mutating the u16 slice will mutating the original","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116816,"byte_end":116876,"line_start":58,"line_end":58,"column_start":5,"column_end":65}},{"value":"/     int_buffer[0] = 0;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116881,"byte_end":116907,"line_start":59,"line_end":59,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116912,"byte_end":116917,"line_start":60,"line_end":60,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116922,"byte_end":116925,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ // Note that we need to drop int_buffer before using float_buffer again or we will get a borrow error.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":116930,"byte_end":117036,"line_start":62,"line_end":62,"column_start":5,"column_end":111}},{"value":"/ assert_eq!(float_buffer, [f16::from_f32(0.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117041,"byte_end":117129,"line_start":63,"line_end":63,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117134,"byte_end":117141,"line_start":64,"line_end":64,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118314,"byte_end":118336,"line_start":95,"line_end":95,"column_start":8,"column_end":30},"name":"convert_from_f32_slice","qualname":"::slice::HalfFloatSliceExt::convert_from_f32_slice","value":"pub fn convert_from_f32_slice(&mut Self, &[f32])","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" Convert all of the elements of a `[f32]` slice into [`f16`](../struct.f16.html) or\n [`bf16`](../struct.bf16.html) values in `self`.","sig":null,"attributes":[{"value":"/ Convert all of the elements of a `[f32]` slice into [`f16`](../struct.f16.html) or","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117201,"byte_end":117287,"line_start":67,"line_end":67,"column_start":5,"column_end":91}},{"value":"/ [`bf16`](../struct.bf16.html) values in `self`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117292,"byte_end":117343,"line_start":68,"line_end":68,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117348,"byte_end":117351,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117356,"byte_end":117407,"line_start":70,"line_end":70,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117412,"byte_end":117415,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117420,"byte_end":117513,"line_start":72,"line_end":72,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117518,"byte_end":117603,"line_start":73,"line_end":73,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](../index.html) for more information on hardware","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117608,"byte_end":117698,"line_start":74,"line_end":74,"column_start":5,"column_end":95}},{"value":"/ conversion support.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117703,"byte_end":117726,"line_start":75,"line_end":75,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117731,"byte_end":117734,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117739,"byte_end":117751,"line_start":77,"line_end":77,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117756,"byte_end":117759,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117764,"byte_end":117834,"line_start":79,"line_end":79,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117839,"byte_end":117842,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117847,"byte_end":117861,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117866,"byte_end":117877,"line_start":82,"line_end":82,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117882,"byte_end":117909,"line_start":83,"line_end":83,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117914,"byte_end":117947,"line_start":84,"line_end":84,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0u16; 4];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117952,"byte_end":117983,"line_start":85,"line_end":85,"column_start":5,"column_end":36}},{"value":"/ let buffer = buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":117988,"byte_end":118042,"line_start":86,"line_end":86,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118047,"byte_end":118050,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118055,"byte_end":118095,"line_start":88,"line_end":88,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118100,"byte_end":118103,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118108,"byte_end":118126,"line_start":90,"line_end":90,"column_start":5,"column_end":23}},{"value":"/ buffer.convert_from_f32_slice(&float_values);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118131,"byte_end":118180,"line_start":91,"line_end":91,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118185,"byte_end":118188,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118193,"byte_end":118294,"line_start":93,"line_end":93,"column_start":5,"column_end":106}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118299,"byte_end":118306,"line_start":94,"line_end":94,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119480,"byte_end":119502,"line_start":125,"line_end":125,"column_start":8,"column_end":30},"name":"convert_from_f64_slice","qualname":"::slice::HalfFloatSliceExt::convert_from_f64_slice","value":"pub fn convert_from_f64_slice(&mut Self, &[f64])","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" Convert all of the elements of a `[f64]` slice into [`f16`](../struct.f16.html) or\n [`bf16`](../struct.bf16.html) values in `self`.","sig":null,"attributes":[{"value":"/ Convert all of the elements of a `[f64]` slice into [`f16`](../struct.f16.html) or","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118367,"byte_end":118453,"line_start":97,"line_end":97,"column_start":5,"column_end":91}},{"value":"/ [`bf16`](../struct.bf16.html) values in `self`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118458,"byte_end":118509,"line_start":98,"line_end":98,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118514,"byte_end":118517,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118522,"byte_end":118573,"line_start":100,"line_end":100,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118578,"byte_end":118581,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118586,"byte_end":118679,"line_start":102,"line_end":102,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118684,"byte_end":118769,"line_start":103,"line_end":103,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](../index.html) for more information on hardware","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118774,"byte_end":118864,"line_start":104,"line_end":104,"column_start":5,"column_end":95}},{"value":"/ conversion support.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118869,"byte_end":118892,"line_start":105,"line_end":105,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118897,"byte_end":118900,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118905,"byte_end":118917,"line_start":107,"line_end":107,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118922,"byte_end":118925,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":118930,"byte_end":119000,"line_start":109,"line_end":109,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119005,"byte_end":119008,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119013,"byte_end":119027,"line_start":111,"line_end":111,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119032,"byte_end":119043,"line_start":112,"line_end":112,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119048,"byte_end":119075,"line_start":113,"line_end":113,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119080,"byte_end":119113,"line_start":114,"line_end":114,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0u16; 4];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119118,"byte_end":119149,"line_start":115,"line_end":115,"column_start":5,"column_end":36}},{"value":"/ let buffer = buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119154,"byte_end":119208,"line_start":116,"line_end":116,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119213,"byte_end":119216,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ let float_values = [1., 2., 3., 4.];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119221,"byte_end":119261,"line_start":118,"line_end":118,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119266,"byte_end":119269,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119274,"byte_end":119292,"line_start":120,"line_end":120,"column_start":5,"column_end":23}},{"value":"/ buffer.convert_from_f64_slice(&float_values);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119297,"byte_end":119346,"line_start":121,"line_end":121,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119351,"byte_end":119354,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119359,"byte_end":119460,"line_start":123,"line_end":123,"column_start":5,"column_end":106}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119465,"byte_end":119472,"line_start":124,"line_end":124,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120583,"byte_end":120603,"line_start":154,"line_end":154,"column_start":8,"column_end":28},"name":"convert_to_f32_slice","qualname":"::slice::HalfFloatSliceExt::convert_to_f32_slice","value":"pub fn convert_to_f32_slice(&Self, &mut [f32])","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" Convert all of the [`f16`](../struct.f16.html) or [`bf16`](../struct.bf16.html)\n elements of `self` into `f32` values in `dst`.","sig":null,"attributes":[{"value":"/ Convert all of the [`f16`](../struct.f16.html) or [`bf16`](../struct.bf16.html)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119533,"byte_end":119616,"line_start":127,"line_end":127,"column_start":5,"column_end":88}},{"value":"/ elements of `self` into `f32` values in `dst`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119621,"byte_end":119671,"line_start":128,"line_end":128,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119676,"byte_end":119679,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119684,"byte_end":119735,"line_start":130,"line_end":130,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119740,"byte_end":119743,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119748,"byte_end":119841,"line_start":132,"line_end":132,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119846,"byte_end":119931,"line_start":133,"line_end":133,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](../index.html) for more information on hardware","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":119936,"byte_end":120026,"line_start":134,"line_end":134,"column_start":5,"column_end":95}},{"value":"/ conversion support.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120031,"byte_end":120054,"line_start":135,"line_end":135,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120059,"byte_end":120062,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120067,"byte_end":120079,"line_start":137,"line_end":137,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120084,"byte_end":120087,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120092,"byte_end":120162,"line_start":139,"line_end":139,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120167,"byte_end":120170,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120175,"byte_end":120189,"line_start":141,"line_end":141,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120194,"byte_end":120205,"line_start":142,"line_end":142,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120210,"byte_end":120237,"line_start":143,"line_end":143,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120242,"byte_end":120275,"line_start":144,"line_end":144,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0f32; 4];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120280,"byte_end":120311,"line_start":145,"line_end":145,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120316,"byte_end":120319,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ let half_values = [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.), f16::from_f32(4.)];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120324,"byte_end":120423,"line_start":147,"line_end":147,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120428,"byte_end":120431,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120436,"byte_end":120454,"line_start":149,"line_end":149,"column_start":5,"column_end":23}},{"value":"/ half_values.convert_to_f32_slice(&mut buffer);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120459,"byte_end":120509,"line_start":150,"line_end":150,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120514,"byte_end":120517,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [1., 2., 3., 4.]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120522,"byte_end":120563,"line_start":152,"line_end":152,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120568,"byte_end":120575,"line_start":153,"line_end":153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121684,"byte_end":121704,"line_start":183,"line_end":183,"column_start":8,"column_end":28},"name":"convert_to_f64_slice","qualname":"::slice::HalfFloatSliceExt::convert_to_f64_slice","value":"pub fn convert_to_f64_slice(&Self, &mut [f64])","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" Convert all of the [`f16`](../struct.f16.html) or [`bf16`](../struct.bf16.html)\n elements of `self` into `f64` values in `dst`.","sig":null,"attributes":[{"value":"/ Convert all of the [`f16`](../struct.f16.html) or [`bf16`](../struct.bf16.html)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120634,"byte_end":120717,"line_start":156,"line_end":156,"column_start":5,"column_end":88}},{"value":"/ elements of `self` into `f64` values in `dst`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120722,"byte_end":120772,"line_start":157,"line_end":157,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120777,"byte_end":120780,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120785,"byte_end":120836,"line_start":159,"line_end":159,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120841,"byte_end":120844,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ The conversion operation is vectorized over the slice, meaning the conversion may be more","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120849,"byte_end":120942,"line_start":161,"line_end":161,"column_start":5,"column_end":98}},{"value":"/ efficient than converting individual elements on some hardware that supports SIMD","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":120947,"byte_end":121032,"line_start":162,"line_end":162,"column_start":5,"column_end":90}},{"value":"/ conversions. See [crate documentation](../index.html) for more information on hardware","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121037,"byte_end":121127,"line_start":163,"line_end":163,"column_start":5,"column_end":95}},{"value":"/ conversion support.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121132,"byte_end":121155,"line_start":164,"line_end":164,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121160,"byte_end":121163,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121168,"byte_end":121180,"line_start":166,"line_end":166,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121185,"byte_end":121188,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121193,"byte_end":121263,"line_start":168,"line_end":168,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121268,"byte_end":121271,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121276,"byte_end":121290,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121295,"byte_end":121306,"line_start":171,"line_end":171,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121311,"byte_end":121338,"line_start":172,"line_end":172,"column_start":5,"column_end":32}},{"value":"/ // Initialize an empty buffer","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121343,"byte_end":121376,"line_start":173,"line_end":173,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = [0f64; 4];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121381,"byte_end":121412,"line_start":174,"line_end":174,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121417,"byte_end":121420,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ let half_values = [f16::from_f64(1.), f16::from_f64(2.), f16::from_f64(3.), f16::from_f64(4.)];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121425,"byte_end":121524,"line_start":176,"line_end":176,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121529,"byte_end":121532,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ // Now convert","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121537,"byte_end":121555,"line_start":178,"line_end":178,"column_start":5,"column_end":23}},{"value":"/ half_values.convert_to_f64_slice(&mut buffer);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121560,"byte_end":121610,"line_start":179,"line_end":179,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121615,"byte_end":121618,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(buffer, [1., 2., 3., 4.]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121623,"byte_end":121664,"line_start":181,"line_end":181,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":121669,"byte_end":121676,"line_start":182,"line_end":182,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":284},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":123843,"byte_end":123859,"line_start":233,"line_end":233,"column_start":11,"column_end":27},"name":"HalfBitsSliceExt","qualname":"::slice::HalfBitsSliceExt","value":"HalfBitsSliceExt: private::SealedHalfBitsSlice","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":287}],"decl_id":null,"docs":" Extensions to `[u16]` slices to support reinterpret operations.","sig":null,"attributes":[{"value":"/ Extensions to `[u16]` slices to support reinterpret operations.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":123687,"byte_end":123754,"line_start":230,"line_end":230,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":123755,"byte_end":123758,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of this crate.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":123759,"byte_end":123832,"line_start":232,"line_end":232,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124900,"byte_end":124916,"line_start":256,"line_end":256,"column_start":8,"column_end":24},"name":"reinterpret_cast","qualname":"::slice::HalfBitsSliceExt::reinterpret_cast","value":"pub fn reinterpret_cast<H>(&Self) -> &[H] where H: crate::private::SealedHalf","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Reinterpret a slice of `u16` bits as a slice of [`f16`](../struct.f16.html) or\n [`bf16`](../struct.bf16.html) numbers.","sig":null,"attributes":[{"value":"/ Reinterpret a slice of `u16` bits as a slice of [`f16`](../struct.f16.html) or","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":123896,"byte_end":123978,"line_start":234,"line_end":234,"column_start":5,"column_end":87}},{"value":"/ [`bf16`](../struct.bf16.html) numbers.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":123983,"byte_end":124025,"line_start":235,"line_end":235,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124030,"byte_end":124033,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ `H` is the type to cast to, and must be either the [`f16`](../struct.f16.html) or","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124038,"byte_end":124123,"line_start":237,"line_end":237,"column_start":5,"column_end":90}},{"value":"/ [`bf16`](../struct.bf16.html) type.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124128,"byte_end":124167,"line_start":238,"line_end":238,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124172,"byte_end":124175,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The reinterpreted slice has the same lifetime and memory","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124180,"byte_end":124271,"line_start":240,"line_end":240,"column_start":5,"column_end":96}},{"value":"/ location as `self`.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124276,"byte_end":124299,"line_start":241,"line_end":241,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124304,"byte_end":124307,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124312,"byte_end":124326,"line_start":243,"line_end":243,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124331,"byte_end":124334,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124339,"byte_end":124350,"line_start":245,"line_end":245,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124355,"byte_end":124382,"line_start":246,"line_end":246,"column_start":5,"column_end":32}},{"value":"/ let int_buffer = [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124387,"byte_end":124496,"line_start":247,"line_end":247,"column_start":5,"column_end":114}},{"value":"/ let float_buffer: &[f16] = int_buffer.reinterpret_cast();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124501,"byte_end":124562,"line_start":248,"line_end":248,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124567,"byte_end":124570,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(float_buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124575,"byte_end":124663,"line_start":250,"line_end":250,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124668,"byte_end":124671,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ // You may have to specify the cast type directly if the compiler can't infer the type.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124676,"byte_end":124767,"line_start":252,"line_end":252,"column_start":5,"column_end":96}},{"value":"/ // The following is also valid in Rust.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124772,"byte_end":124815,"line_start":253,"line_end":253,"column_start":5,"column_end":48}},{"value":"/ let typed_buffer = int_buffer.reinterpret_cast::<f16>();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124820,"byte_end":124880,"line_start":254,"line_end":254,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124885,"byte_end":124892,"line_start":255,"line_end":255,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":126488,"byte_end":126508,"line_start":291,"line_end":291,"column_start":8,"column_end":28},"name":"reinterpret_cast_mut","qualname":"::slice::HalfBitsSliceExt::reinterpret_cast_mut","value":"pub fn reinterpret_cast_mut<H>(&mut Self) -> &mut [H] where\nH: crate::private::SealedHalf","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Reinterpret a mutable slice of `u16` bits as a mutable slice of [`f16`](../struct.f16.html)\n or [`bf16`](../struct.bf16.html)  numbers.","sig":null,"attributes":[{"value":"/ Reinterpret a mutable slice of `u16` bits as a mutable slice of [`f16`](../struct.f16.html)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":124989,"byte_end":125084,"line_start":260,"line_end":260,"column_start":5,"column_end":100}},{"value":"/ or [`bf16`](../struct.bf16.html)  numbers.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125089,"byte_end":125135,"line_start":261,"line_end":261,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125140,"byte_end":125143,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ `H` is the type to cast to, and must be either the [`f16`](../struct.f16.html) or","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125148,"byte_end":125233,"line_start":263,"line_end":263,"column_start":5,"column_end":90}},{"value":"/ [`bf16`](../struct.bf16.html) type.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125238,"byte_end":125277,"line_start":264,"line_end":264,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125282,"byte_end":125285,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This is a zero-copy operation. The transmuted slice has the same lifetime as the original,","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125290,"byte_end":125384,"line_start":266,"line_end":266,"column_start":5,"column_end":99}},{"value":"/ which prevents mutating `self` as long as the returned `&mut [f16]` is borrowed.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125389,"byte_end":125473,"line_start":267,"line_end":267,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125478,"byte_end":125481,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125486,"byte_end":125500,"line_start":269,"line_end":269,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125505,"byte_end":125508,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125513,"byte_end":125524,"line_start":271,"line_end":271,"column_start":5,"column_end":16}},{"value":"/ # use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125529,"byte_end":125556,"line_start":272,"line_end":272,"column_start":5,"column_end":32}},{"value":"/ let mut int_buffer = [f16::from_f32(1.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()];","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125561,"byte_end":125674,"line_start":273,"line_end":273,"column_start":5,"column_end":118}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125679,"byte_end":125682,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125687,"byte_end":125692,"line_start":275,"line_end":275,"column_start":5,"column_end":10}},{"value":"/     let float_buffer: &mut [f16] = int_buffer.reinterpret_cast_mut();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125697,"byte_end":125770,"line_start":276,"line_end":276,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125775,"byte_end":125778,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(float_buffer, [f16::from_f32(1.), f16::from_f32(2.), f16::from_f32(3.)]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125783,"byte_end":125875,"line_start":278,"line_end":278,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125880,"byte_end":125883,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/     // Mutating the f16 slice will mutating the original","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125888,"byte_end":125948,"line_start":280,"line_end":280,"column_start":5,"column_end":65}},{"value":"/     float_buffer[0] = f16::from_f32(0.);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":125953,"byte_end":125997,"line_start":281,"line_end":281,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":126002,"byte_end":126007,"line_start":282,"line_end":282,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":126012,"byte_end":126015,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ // Note that we need to drop float_buffer before using int_buffer again or we will get a borrow error.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":126020,"byte_end":126126,"line_start":284,"line_end":284,"column_start":5,"column_end":111}},{"value":"/ assert_eq!(int_buffer, [f16::from_f32(0.).to_bits(), f16::from_f32(2.).to_bits(), f16::from_f32(3.).to_bits()]);","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":126131,"byte_end":126247,"line_start":285,"line_end":285,"column_start":5,"column_end":121}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":126252,"byte_end":126255,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ // You may have to specify the cast type directly if the compiler can't infer the type.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":126260,"byte_end":126351,"line_start":287,"line_end":287,"column_start":5,"column_end":96}},{"value":"/ // The following is also valid in Rust.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":126356,"byte_end":126399,"line_start":288,"line_end":288,"column_start":5,"column_end":48}},{"value":"/ let typed_buffer = int_buffer.reinterpret_cast_mut::<f16>();","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":126404,"byte_end":126468,"line_start":289,"line_end":289,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":126473,"byte_end":126480,"line_start":290,"line_end":290,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":293},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":126644,"byte_end":126664,"line_start":299,"line_end":299,"column_start":15,"column_end":35},"name":"SealedHalfFloatSlice","qualname":"::slice::private::SealedHalfFloatSlice","value":"SealedHalfFloatSlice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":296},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":126770,"byte_end":126789,"line_start":303,"line_end":303,"column_start":15,"column_end":34},"name":"SealedHalfBitsSlice","qualname":"::slice::private::SealedHalfBitsSlice","value":"SealedHalfBitsSlice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":321},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137462,"byte_end":137475,"line_start":592,"line_end":592,"column_start":8,"column_end":21},"name":"from_bits_mut","qualname":"::slice::from_bits_mut","value":"pub fn from_bits_mut(&mut [u16]) -> &mut [f16]","parent":null,"children":[],"decl_id":null,"docs":" Reinterpret a mutable slice of `u16` bits as a mutable slice of [`f16`](../struct.f16.html)\n numbers.","sig":null,"attributes":[{"value":"/ Reinterpret a mutable slice of `u16` bits as a mutable slice of [`f16`](../struct.f16.html)","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":136991,"byte_end":137086,"line_start":582,"line_end":582,"column_start":1,"column_end":96}},{"value":"/ numbers.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137087,"byte_end":137099,"line_start":583,"line_end":583,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137100,"byte_end":137103,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ The transmuted slice has the same life time as the original, which prevents mutating the borrowed","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137104,"byte_end":137205,"line_start":585,"line_end":585,"column_start":1,"column_end":102}},{"value":"/ `mut [u16]` argument as long as the returned `mut [f16]` is borrowed.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137206,"byte_end":137279,"line_start":586,"line_end":586,"column_start":1,"column_end":74}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"use [`HalfBitsSliceExt::reinterpret_cast_mut`](trait.HalfBitsSliceExt.html#tymethod.reinterpret_cast_mut) instead\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137280,"byte_end":137444,"line_start":587,"line_end":590,"column_start":1,"column_end":3}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137445,"byte_end":137454,"line_start":591,"line_end":591,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":322},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138017,"byte_end":138028,"line_start":606,"line_end":606,"column_start":8,"column_end":19},"name":"to_bits_mut","qualname":"::slice::to_bits_mut","value":"pub fn to_bits_mut(&mut [f16]) -> &mut [u16]","parent":null,"children":[],"decl_id":null,"docs":" Reinterpret a mutable slice of [`f16`](../struct.f16.html) numbers as a mutable slice of `u16`\n bits.","sig":null,"attributes":[{"value":"/ Reinterpret a mutable slice of [`f16`](../struct.f16.html) numbers as a mutable slice of `u16`","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137545,"byte_end":137643,"line_start":596,"line_end":596,"column_start":1,"column_end":99}},{"value":"/ bits.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137644,"byte_end":137653,"line_start":597,"line_end":597,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137654,"byte_end":137657,"line_start":598,"line_end":598,"column_start":1,"column_end":4}},{"value":"/The transmuted slice has the same life time as the original, which prevents mutating the","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137658,"byte_end":137749,"line_start":599,"line_end":599,"column_start":1,"column_end":92}},{"value":"/ borrowed `mut [f16]` argument as long as the returned `mut [u16]` is borrowed.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137750,"byte_end":137832,"line_start":600,"line_end":600,"column_start":1,"column_end":83}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"use [`HalfFloatSliceExt::reinterpret_cast_mut`](trait.HalfFloatSliceExt.html#tymethod.reinterpret_cast_mut) instead\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":137833,"byte_end":137999,"line_start":601,"line_end":604,"column_start":1,"column_end":3}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138000,"byte_end":138009,"line_start":605,"line_end":605,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":323},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138430,"byte_end":138439,"line_start":618,"line_end":618,"column_start":8,"column_end":17},"name":"from_bits","qualname":"::slice::from_bits","value":"pub fn from_bits(&[u16]) -> &[f16]","parent":null,"children":[],"decl_id":null,"docs":" Reinterpret a slice of `u16` bits as a slice of [`f16`](../struct.f16.html) numbers.","sig":null,"attributes":[{"value":"/ Reinterpret a slice of `u16` bits as a slice of [`f16`](../struct.f16.html) numbers.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138098,"byte_end":138186,"line_start":610,"line_end":610,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138187,"byte_end":138190,"line_start":611,"line_end":611,"column_start":1,"column_end":4}},{"value":"/ The transmuted slice has the same life time as the original.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138191,"byte_end":138255,"line_start":612,"line_end":612,"column_start":1,"column_end":65}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"use [`HalfBitsSliceExt::reinterpret_cast`](trait.HalfBitsSliceExt.html#tymethod.reinterpret_cast) instead\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138256,"byte_end":138412,"line_start":613,"line_end":616,"column_start":1,"column_end":3}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138413,"byte_end":138422,"line_start":617,"line_end":617,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":324},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138831,"byte_end":138838,"line_start":630,"line_end":630,"column_start":8,"column_end":15},"name":"to_bits","qualname":"::slice::to_bits","value":"pub fn to_bits(&[f16]) -> &[u16]","parent":null,"children":[],"decl_id":null,"docs":" Reinterpret a slice of [`f16`](../struct.f16.html) numbers as a slice of `u16` bits.","sig":null,"attributes":[{"value":"/ Reinterpret a slice of [`f16`](../struct.f16.html) numbers as a slice of `u16` bits.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138497,"byte_end":138585,"line_start":622,"line_end":622,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138586,"byte_end":138589,"line_start":623,"line_end":623,"column_start":1,"column_end":4}},{"value":"/ The transmuted slice has the same life time as the original.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138590,"byte_end":138654,"line_start":624,"line_end":624,"column_start":1,"column_end":65}},{"value":"deprecated(since = \"1.4.0\", note =\n             \"use [`HalfFloatSliceExt::reinterpret_cast`](trait.HalfFloatSliceExt.html#tymethod.reinterpret_cast) instead\")","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138655,"byte_end":138813,"line_start":625,"line_end":628,"column_start":1,"column_end":3}},{"value":"inline","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":138814,"byte_end":138823,"line_start":629,"line_end":629,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":328},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3950,"byte_end":3957,"line_start":94,"line_end":94,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334}],"decl_id":null,"docs":" A collection of the most used items and traits in this crate for easy importing.","sig":null,"attributes":[{"value":"/ A collection of the most used items and traits in this crate for easy importing.","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3788,"byte_end":3872,"line_start":87,"line_end":87,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3873,"byte_end":3876,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3877,"byte_end":3891,"line_start":89,"line_end":89,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3892,"byte_end":3895,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3896,"byte_end":3907,"line_start":91,"line_end":91,"column_start":1,"column_end":12}},{"value":"/ use half::prelude::*;","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3908,"byte_end":3933,"line_start":92,"line_end":92,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3934,"byte_end":3941,"line_start":93,"line_end":93,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":339},"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":4303,"byte_end":4313,"line_start":109,"line_end":109,"column_start":15,"column_end":25},"name":"SealedHalf","qualname":"::private::SealedHalf","value":"SealedHalf","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5596,"byte_end":5600,"line_start":33,"line_end":33,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19961,"byte_end":19965,"line_start":472,"line_end":472,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":20115,"byte_end":20119,"line_start":480,"line_end":480,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":20269,"byte_end":20273,"line_start":488,"line_end":488,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":20509,"byte_end":20513,"line_start":498,"line_end":498,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":23492,"byte_end":23496,"line_start":587,"line_end":587,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":23664,"byte_end":23668,"line_start":594,"line_end":594,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":23797,"byte_end":23801,"line_start":600,"line_end":600,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":23934,"byte_end":23938,"line_start":606,"line_end":606,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":24073,"byte_end":24077,"line_start":612,"line_end":612,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57887,"byte_end":57890,"line_start":257,"line_end":257,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72592,"byte_end":72595,"line_start":709,"line_end":709,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72742,"byte_end":72745,"line_start":717,"line_end":717,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72893,"byte_end":72896,"line_start":725,"line_end":725,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":73131,"byte_end":73134,"line_start":735,"line_end":735,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":76108,"byte_end":76111,"line_start":824,"line_end":824,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":76277,"byte_end":76280,"line_start":831,"line_end":831,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":76409,"byte_end":76412,"line_start":837,"line_end":837,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":76545,"byte_end":76548,"line_start":843,"line_end":843,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":76683,"byte_end":76686,"line_start":849,"line_end":849,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":4342,"byte_end":4345,"line_start":111,"line_end":111,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":4373,"byte_end":4377,"line_start":112,"line_end":112,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":3624,"byte_end":3629,"line_start":76,"line_end":76,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":271}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":5596,"byte_end":5600,"line_start":33,"line_end":33,"column_start":6,"column_end":10},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":19961,"byte_end":19965,"line_start":472,"line_end":472,"column_start":19,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":342},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":20115,"byte_end":20119,"line_start":480,"line_end":480,"column_start":19,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":342},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":20269,"byte_end":20273,"line_start":488,"line_end":488,"column_start":20,"column_end":24},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":342},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":20509,"byte_end":20513,"line_start":498,"line_end":498,"column_start":21,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":342},"to":{"krate":1,"index":1734}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":23492,"byte_end":23496,"line_start":587,"line_end":587,"column_start":18,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":342},"to":{"krate":1,"index":7901}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":23664,"byte_end":23668,"line_start":594,"line_end":594,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":342},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":23797,"byte_end":23801,"line_start":600,"line_end":600,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":342},"to":{"krate":1,"index":6320}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":23934,"byte_end":23938,"line_start":606,"line_end":606,"column_start":19,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":342},"to":{"krate":1,"index":6332}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/bfloat.rs","byte_start":24073,"byte_end":24077,"line_start":612,"line_end":612,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":342},"to":{"krate":1,"index":6334}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":57887,"byte_end":57890,"line_start":257,"line_end":257,"column_start":6,"column_end":9},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72592,"byte_end":72595,"line_start":709,"line_end":709,"column_start":19,"column_end":22},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72742,"byte_end":72745,"line_start":717,"line_end":717,"column_start":19,"column_end":22},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":1889}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":72893,"byte_end":72896,"line_start":725,"line_end":725,"column_start":20,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":1697}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":73131,"byte_end":73134,"line_start":735,"line_end":735,"column_start":21,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":1734}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":76108,"byte_end":76111,"line_start":824,"line_end":824,"column_start":18,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":7901}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":76277,"byte_end":76280,"line_start":831,"line_end":831,"column_start":16,"column_end":19},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":6315}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":76409,"byte_end":76412,"line_start":837,"line_end":837,"column_start":18,"column_end":21},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":6320}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":76545,"byte_end":76548,"line_start":843,"line_end":843,"column_start":19,"column_end":22},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":6332}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/binary16.rs","byte_start":76683,"byte_end":76686,"line_start":849,"line_end":849,"column_start":19,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":6334}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":115374,"byte_end":115394,"line_start":23,"line_end":23,"column_start":39,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":293},"to":{"krate":0,"index":277}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/slice.rs","byte_start":123870,"byte_end":123889,"line_start":233,"line_end":233,"column_start":38,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":296},"to":{"krate":0,"index":284}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":4342,"byte_end":4345,"line_start":111,"line_end":111,"column_start":25,"column_end":28},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":362},"to":{"krate":0,"index":339}},{"span":{"file_name":"/home/andort/.cargo/registry/src/github.com-1ecc6299db9ec823/half-1.6.0/src/lib.rs","byte_start":4373,"byte_end":4377,"line_start":112,"line_end":112,"column_start":25,"column_end":29},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":342},"to":{"krate":0,"index":339}}]}